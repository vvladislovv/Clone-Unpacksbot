version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: unpacker_postgres
    environment:
      POSTGRES_DB: unpacker
      POSTGRES_USER: unpacker_user
      POSTGRES_PASSWORD: unpacker_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - unpacker_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: unpacker_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - unpacker_network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: unpacker_backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://unpacker_user:unpacker_pass@postgres:5432/unpacker
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your_jwt_secret_here
      TELEGRAM_BOT_TOKEN: your_telegram_bot_token
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - unpacker_network
    command: npm run dev

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: unpacker_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - unpacker_network
    command: npm run dev

  # Telegram Bot Service
  telegram-bot:
    build:
      context: ./telegram-bot
      dockerfile: Dockerfile
    container_name: unpacker_telegram_bot
    environment:
      NODE_ENV: development
      TELEGRAM_BOT_TOKEN: your_telegram_bot_token
      API_URL: http://backend:3001
      WEBHOOK_URL: https://your-domain.com/webhook
    depends_on:
      - backend
    volumes:
      - ./telegram-bot:/app
      - /app/node_modules
    networks:
      - unpacker_network
    command: npm run dev

  # Admin Panel
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: unpacker_admin
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3002:3000"
    depends_on:
      - backend
    volumes:
      - ./admin:/app
      - /app/node_modules
      - /app/.next
    networks:
      - unpacker_network
    command: npm run dev

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: unpacker_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - admin
    networks:
      - unpacker_network

volumes:
  postgres_data:
  redis_data:

networks:
  unpacker_network:
    driver: bridge

import { Context } from 'telegraf'
import { APIService } from '../services/api.js'

const apiService = new APIService()

export const campaignsHandler = async (ctx: Context) => {
  try {
    const telegramId = ctx.from?.id.toString()
    
    if (!telegramId) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return
    }

    const campaignsData = await apiService.getUserCampaigns(telegramId)
    
    let campaignsText = `üìä *–í–∞—à–∏ –∫–∞–º–ø–∞–Ω–∏–∏*\n\n`

    if (campaignsData.stats) {
      campaignsText += `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`
      campaignsText += `üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${campaignsData.stats.totalSpent || 0} ‚ÇΩ\n`
      campaignsText += `üëÜ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: ${campaignsData.stats.totalClicks || 0}\n`
      campaignsText += `üìä –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: ${campaignsData.stats.totalCampaigns || 0}\n\n`
    }

    if (campaignsData.campaigns && campaignsData.campaigns.length > 0) {
      campaignsText += `üéØ *–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏:*\n\n`
      
      campaignsData.campaigns.slice(0, 5).forEach((campaign, index) => {
        const statusEmoji = campaign.status === 'ACTIVE' ? 'üü¢' :
                          campaign.status === 'PAUSED' ? '‚è∏Ô∏è' :
                          campaign.status === 'DRAFT' ? 'üìù' : '‚≠ê'
        
        const typeEmoji = campaign.type === 'product' ? 'üõí' : 'üì¢'
        
        campaignsText += `${typeEmoji} *${campaign.title}*\n`
        campaignsText += `   ${statusEmoji} –°—Ç–∞—Ç—É—Å: ${campaign.status}\n`
        campaignsText += `   üí∞ –ë—é–¥–∂–µ—Ç: ${campaign.budget} ‚ÇΩ\n`
        campaignsText += `   üëÜ –ö–ª–∏–∫–∏: ${campaign.currentClicks}${campaign.maxClicks ? `/${campaign.maxClicks}` : ''}\n`
        campaignsText += `   üíµ –ó–∞ –∫–ª–∏–∫: ${campaign.pricePerClick} ‚ÇΩ\n\n`
      })

      // Add action buttons for first campaign
      if (campaignsData.campaigns[0]) {
        const firstCampaign = campaignsData.campaigns[0]
        const buttons = []
        
        if (firstCampaign.status === 'DRAFT' || firstCampaign.status === 'PAUSED') {
          buttons.push({ text: '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å', callback_data: `campaign_start_${firstCampaign.id}` })
        }
        
        if (firstCampaign.status === 'ACTIVE') {
          buttons.push({ text: '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: `campaign_pause_${firstCampaign.id}` })
        }

        if (buttons.length > 0) {
          await ctx.reply(campaignsText, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                buttons,
                [{ text: 'üìä –í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏', url: `${process.env.FRONTEND_URL}/dashboard/campaigns` }]
              ]
            }
          })
          return
        }
      }
    } else {
      campaignsText += `üìù –ö–∞–º–ø–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç\n\n`
      campaignsText += `üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!`
    }

    await ctx.reply(campaignsText, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é', url: `${process.env.FRONTEND_URL}/dashboard/campaigns/create` }],
          [{ text: 'üìä –í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏', url: `${process.env.FRONTEND_URL}/dashboard/campaigns` }]
        ]
      }
    })
  } catch (error) {
    console.error('Campaigns handler error:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–º–ø–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
}

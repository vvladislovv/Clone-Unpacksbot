import { Context } from 'telegraf'
import { APIService } from '../services/api.js'

const apiService = new APIService()

export const startHandler = async (ctx: Context) => {
  try {
    const telegramId = ctx.from?.id.toString()
    
    if (!telegramId) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return
    }

    // Check if user exists
    const user = await apiService.getUserByTelegramId(telegramId)
    
    if (user) {
      // User already registered
      await ctx.reply(
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${user.firstName}!\n\n` +
        'üéØ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π.',
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
                { text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'balance' },
              ],
              [
                { text: 'üìä –ö–∞–º–ø–∞–Ω–∏–∏', callback_data: 'campaigns' },
                { text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'notifications' },
              ],
              [
                { text: 'üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', callback_data: 'referral' },
              ],
              [
                { text: 'üìã –ü–æ–º–æ—â—å', callback_data: 'help' },
              ],
            ],
          },
        }
      )
    } else {
      // New user - show welcome message and registration
      await ctx.reply(
        'üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Unpacker Clone!*\n\n' +
        'üöÄ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –±–ª–æ–≥–µ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\n\n' +
        '*–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:*\n' +
        '‚Ä¢ üõí –£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä–∞–º–∏ Wildberries\n' +
        '‚Ä¢ üì¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏\n' +
        '‚Ä¢ üí¨ –†–∞–∑–º–µ—â–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø\n' +
        '‚Ä¢ üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ (50%)\n' +
        '‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–æ—Ö–æ–¥—ã\n\n' +
        '*–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:*\n' +
        'üîπ *–°–µ–ª–ª–µ—Ä* - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∫–∞–º–ø–∞–Ω–∏—è–º–∏\n' +
        'üîπ *–ë–ª–æ–≥–µ—Ä* - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n' +
        'üîπ *–ú–µ–Ω–µ–¥–∂–µ—Ä* - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n' +
        'üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'register' }],
              [{ text: 'üìã –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data: 'help' }],
            ],
          },
        }
      )
    }
  } catch (error) {
    console.error('Start handler error:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
}

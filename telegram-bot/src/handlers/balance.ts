import { Context } from 'telegraf'
import { APIService } from '../services/api.js'

const apiService = new APIService()

export const balanceHandler = async (ctx: Context) => {
  try {
    const telegramId = ctx.from?.id.toString()
    
    if (!telegramId) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return
    }

    const balanceData = await apiService.getUserBalance(telegramId)
    
    let balanceText = `üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å*\n\n`
    balanceText += `üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *${balanceData.balance} ‚ÇΩ*\n\n`

    if (balanceData.transactions && balanceData.transactions.length > 0) {
      balanceText += `üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:*\n\n`
      
      balanceData.transactions.slice(0, 5).forEach((transaction, index) => {
        const amount = transaction.amount > 0 ? `+${transaction.amount}` : transaction.amount
        const statusEmoji = transaction.status === 'COMPLETED' ? '‚úÖ' : 
                          transaction.status === 'PENDING' ? '‚è≥' : '‚ùå'
        const typeEmoji = transaction.type === 'DEPOSIT' ? 'üí≥' :
                         transaction.type === 'WITHDRAWAL' ? 'üí∏' :
                         transaction.type === 'REFERRAL' ? 'üéÅ' : 'üí∞'
        
        balanceText += `${typeEmoji} ${amount} ‚ÇΩ ${statusEmoji}\n`
        if (transaction.description) {
          balanceText += `   ${transaction.description}\n`
        }
        balanceText += `   ${new Date(transaction.createdAt).toLocaleDateString()}\n\n`
      })
    } else {
      balanceText += `üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç`
    }

    await ctx.reply(balanceText, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', callback_data: 'withdraw_bank_card' }
          ],
          [
            { text: 'üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', url: `${process.env.FRONTEND_URL}/dashboard/transactions` }
          ]
        ]
      }
    })
  } catch (error) {
    console.error('Balance handler error:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
}

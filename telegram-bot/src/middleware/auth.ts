import { Context, MiddlewareFn } from 'telegraf'
import { APIService } from '../services/api.js'

const apiService = new APIService()

export const authMiddleware: MiddlewareFn<Context> = async (ctx, next) => {
  try {
    const telegramId = ctx.from?.id.toString()
    
    if (!telegramId) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return
    }

    // Check if user exists in our system
    const user = await apiService.getUserByTelegramId(telegramId)
    
    if (!user) {
      await ctx.reply(
        'üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'register' }],
              [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'start' }]
            ]
          }
        }
      )
      return
    }

    // Check if user is active
    if (!user.isActive) {
      await ctx.reply(
        'üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n' +
        '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/support_unpacker_clone' }]
            ]
          }
        }
      )
      return
    }

    // Add user data to context
    ctx.state = ctx.state || {}
    ctx.state.user = user

    await next()
  } catch (error) {
    console.error('Auth middleware error:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
}

import { Scenes } from 'telegraf'
import { APIService } from '../services/api.js'

const apiService = new APIService()

export const withdrawalScene = new Scenes.BaseScene<Scenes.SceneContext>('withdrawal')

let withdrawalData: any = {}

withdrawalScene.enter(async (ctx) => {
  withdrawalData = {
    method: ctx.scene.state.withdrawalMethod || 'bank_card',
    details: {}
  }

  const methodNames = {
    bank_card: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
    yoomoney: '–ÆMoney',
    qiwi: 'QIWI'
  }

  await ctx.reply(
    `üí∏ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*\n\n` +
    `üìã –°–ø–æ—Å–æ–±: ${methodNames[withdrawalData.method as keyof typeof methodNames]}\n\n` +
    `üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' }]
        ]
      }
    }
  )

  ctx.scene.state.waitingForAmount = true
})

withdrawalScene.action('cancel', async (ctx) => {
  await ctx.editMessageText('‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω.')
  await ctx.scene.leave()
})

withdrawalScene.on('text', async (ctx) => {
  const text = ctx.message.text.trim()

  if (ctx.scene.state.waitingForAmount) {
    const amount = parseFloat(text)
    
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:')
      return
    }

    if (amount < 100) {
      await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 100 ‚ÇΩ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:')
      return
    }

    if (amount > 100000) {
      await ctx.reply('‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 100,000 ‚ÇΩ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:')
      return
    }

    withdrawalData.amount = amount
    ctx.scene.state.waitingForAmount = false

    // Ask for payment details based on method
    if (withdrawalData.method === 'bank_card') {
      await ctx.reply(
        `üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã:\n\n` +
        `üìù –§–æ—Ä–º–∞—Ç: 1234 5678 9012 3456`
      )
      ctx.scene.state.waitingForCard = true
    } else if (withdrawalData.method === 'yoomoney') {
      await ctx.reply(
        `üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –ÆMoney:\n\n` +
        `üìù –§–æ—Ä–º–∞—Ç: 410011234567890`
      )
      ctx.scene.state.waitingForAccount = true
    } else if (withdrawalData.method === 'qiwi') {
      await ctx.reply(
        `üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ QIWI:\n\n` +
        `üìù –§–æ—Ä–º–∞—Ç: +79123456789`
      )
      ctx.scene.state.waitingForPhone = true
    }

  } else if (ctx.scene.state.waitingForCard) {
    const cardNumber = text.replace(/\s/g, '')
    
    if (!/^\d{16}$/.test(cardNumber)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –í–≤–µ–¥–∏—Ç–µ 16 —Ü–∏—Ñ—Ä:')
      return
    }

    withdrawalData.details.cardNumber = cardNumber
    await finishWithdrawal(ctx)

  } else if (ctx.scene.state.waitingForAccount) {
    if (!/^\d{12,15}$/.test(text)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:')
      return
    }

    withdrawalData.details.accountId = text
    await finishWithdrawal(ctx)

  } else if (ctx.scene.state.waitingForPhone) {
    const phone = text.replace(/[^\d+]/g, '')
    
    if (!/^\+?\d{11}$/.test(phone)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789:')
      return
    }

    withdrawalData.details.phone = phone
    await finishWithdrawal(ctx)
  }
})

async function finishWithdrawal(ctx: any) {
  try {
    await ctx.reply('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥...')

    const telegramId = ctx.from?.id.toString()
    if (!telegramId) {
      throw new Error('No telegram ID')
    }

    const transaction = await apiService.createWithdrawal(telegramId, withdrawalData)
    
    const methodNames = {
      bank_card: '–±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É',
      yoomoney: '–ÆMoney',
      qiwi: 'QIWI'
    }

    await ctx.reply(
      `‚úÖ *–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!*\n\n` +
      `üí∞ –°—É–º–º–∞: ${withdrawalData.amount} ‚ÇΩ\n` +
      `üìã –°–ø–æ—Å–æ–±: ${methodNames[withdrawalData.method as keyof typeof methodNames]}\n` +
      `üÜî ID –∑–∞—è–≤–∫–∏: \`${transaction.id}\`\n\n` +
      `‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–π–º–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n` +
      `üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –≤ –±–æ—Ç.`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'balance' }],
            [{ text: 'üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', url: `${process.env.FRONTEND_URL}/dashboard/transactions` }]
          ]
        }
      }
    )

    await ctx.scene.leave()
  } catch (error) {
    console.error('Withdrawal error:', error)
    
    await ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n\n' +
      '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
      '‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ\n' +
      '‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n' +
      '‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞\n\n' +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'balance' }],
            [{ text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/support_unpacker_clone' }]
          ]
        }
      }
    )

    await ctx.scene.leave()
  }
}

import { Scenes } from 'telegraf'
import { APIService } from '../services/api.js'

const apiService = new APIService()

export const registerScene = new Scenes.BaseScene<Scenes.SceneContext>('register')

let userData: any = {}

registerScene.enter(async (ctx) => {
  userData = {
    telegramId: ctx.from?.id.toString(),
    firstName: ctx.from?.first_name,
    lastName: ctx.from?.last_name,
    username: ctx.from?.username
  }

  await ctx.reply(
    'üìù *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Unpacker Clone*\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ:',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üõí –°–µ–ª–ª–µ—Ä', callback_data: 'role_SELLER' }],
          [{ text: 'üì¢ –ë–ª–æ–≥–µ—Ä', callback_data: 'role_BLOGGER' }],
          [{ text: '‚öôÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä', callback_data: 'role_MANAGER' }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' }]
        ]
      }
    }
  )
})

registerScene.action(/^role_(.+)$/, async (ctx) => {
  const role = ctx.match![1]
  userData.role = role

  await ctx.editMessageText(
    `‚úÖ –†–æ–ª—å "${role}" –≤—ã–±—Ä–∞–Ω–∞!\n\n` +
    'üéÅ –£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n' +
    '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_referral' }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' }]
        ]
      }
    }
  )

  ctx.scene.state.waitingForReferral = true
})

registerScene.action('skip_referral', async (ctx) => {
  await finishRegistration(ctx)
})

registerScene.action('cancel', async (ctx) => {
  await ctx.editMessageText(
    '‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n' +
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.'
  )
  await ctx.scene.leave()
})

registerScene.on('text', async (ctx) => {
  if (ctx.scene.state.waitingForReferral) {
    const referralCode = ctx.message.text.trim().toUpperCase()
    
    if (referralCode.length === 8 && /^[A-Z0-9]+$/.test(referralCode)) {
      userData.referralCode = referralCode
      await ctx.reply('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–Ω—è—Ç!')
    } else {
      await ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...')
    }
    
    await finishRegistration(ctx)
  }
})

async function finishRegistration(ctx: any) {
  try {
    await ctx.reply('‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...')

    const result = await apiService.registerUser(userData)
    
    const roleNames = {
      SELLER: '–°–µ–ª–ª–µ—Ä',
      BLOGGER: '–ë–ª–æ–≥–µ—Ä',
      MANAGER: '–ú–µ–Ω–µ–¥–∂–µ—Ä'
    }

    await ctx.reply(
      `üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n` +
      `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${result.user.firstName}!\n` +
      `üéØ –†–æ–ª—å: ${roleNames[result.user.role as keyof typeof roleNames]}\n` +
      `üéÅ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: \`${result.user.referralCode}\`\n\n` +
      `üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
              { text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'balance' }
            ],
            [
              { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', url: process.env.FRONTEND_URL || 'https://unpacker-clone.com' }
            ]
          ]
        }
      }
    )

    await ctx.scene.leave()
  } catch (error) {
    console.error('Registration error:', error)
    
    await ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n' +
      '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
      '‚Ä¢ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n' +
      '‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥\n' +
      '‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞\n\n' +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'register' }],
            [{ text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/support_unpacker_clone' }]
          ]
        }
      }
    )

    await ctx.scene.leave()
  }
}

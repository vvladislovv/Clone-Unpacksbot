import { Telegraf } from 'telegraf'
import { APIService, User } from './api.js'

export class NotificationService {
  private bot: Telegraf
  private apiService: APIService
  private isRunning = false

  constructor(bot: Telegraf, apiService: APIService) {
    this.bot = bot
    this.apiService = apiService
  }

  start() {
    if (this.isRunning) return
    
    this.isRunning = true
    console.log('Notification service started')

    // Check for notifications every 30 seconds
    setInterval(() => {
      this.checkPendingNotifications()
    }, 30000)
  }

  stop() {
    this.isRunning = false
    console.log('Notification service stopped')
  }

  private async checkPendingNotifications() {
    try {
      // This would be called from the backend when there are notifications to send
      // For now, we'll implement a webhook approach
    } catch (error) {
      console.error('Error checking notifications:', error)
    }
  }

  async sendNotification(telegramId: string, notification: {
    title: string
    message: string
    type: 'info' | 'success' | 'warning' | 'error'
    metadata?: any
  }) {
    try {
      const emoji = {
        info: '‚ÑπÔ∏è',
        success: '‚úÖ',
        warning: '‚ö†Ô∏è',
        error: '‚ùå'
      }

      const text = `${emoji[notification.type]} *${notification.title}*\n\n${notification.message}`
      
      const buttons = []
      
      // Add action buttons based on notification type
      if (notification.metadata?.campaignId) {
        buttons.push([{ text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–º–ø–∞–Ω–∏—é', callback_data: `campaign_view_${notification.metadata.campaignId}` }])
      }
      
      if (notification.metadata?.transactionId) {
        buttons.push([{ text: 'üí∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', callback_data: `transaction_view_${notification.metadata.transactionId}` }])
      }

      buttons.push([{ text: 'üîî –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'notifications' }])

      await this.bot.telegram.sendMessage(telegramId, text, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: buttons
        }
      })

      console.log(`Notification sent to ${telegramId}: ${notification.title}`)
    } catch (error) {
      console.error(`Failed to send notification to ${telegramId}:`, error)
    }
  }

  async sendWelcomeMessage(user: User) {
    try {
      const text = `
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Unpacker Clone!*

–ü—Ä–∏–≤–µ—Ç, ${user.firstName}! –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.

üéØ *–í–∞—à–∞ —Ä–æ–ª—å:* ${user.role}
üéÅ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:* \`${user.referralCode}\`

üí° *–ß—Ç–æ –¥–∞–ª—å—à–µ?*
‚Ä¢ –ò–∑—É—á–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é
‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ 50%
‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!

üöÄ –£–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ!
      `.trim()

      await this.bot.telegram.sendMessage(user.telegramId!, text, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
              { text: 'üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'referral' }
            ],
            [
              { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', url: process.env.FRONTEND_URL || 'https://unpacker-clone.com' }
            ]
          ]
        }
      })
    } catch (error) {
      console.error('Failed to send welcome message:', error)
    }
  }

  async sendCampaignNotification(telegramId: string, campaign: any, action: string) {
    try {
      const actionMessages = {
        started: 'üöÄ –ö–∞–º–ø–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞!',
        paused: '‚è∏Ô∏è –ö–∞–º–ø–∞–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
        completed: 'üéØ –ö–∞–º–ø–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        budget_low: '‚ö†Ô∏è –ë—é–¥–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è'
      }

      const text = `
${actionMessages[action as keyof typeof actionMessages]}

üìä *${campaign.title}*
üí∞ –ë—é–¥–∂–µ—Ç: ${campaign.budget} ‚ÇΩ
üëÜ –ö–ª–∏–∫–∏: ${campaign.currentClicks}${campaign.maxClicks ? `/${campaign.maxClicks}` : ''}

${action === 'completed' ? 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö–∞–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.' : ''}
${action === 'budget_low' ? 'üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±—é–¥–∂–µ—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∫–∞–∑–æ–≤.' : ''}
      `.trim()

      await this.bot.telegram.sendMessage(telegramId, text, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–º–ø–∞–Ω–∏—é', callback_data: `campaign_view_${campaign.id}` }],
            [{ text: 'üìà –í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏', callback_data: 'campaigns' }]
          ]
        }
      })
    } catch (error) {
      console.error('Failed to send campaign notification:', error)
    }
  }

  async sendTransactionNotification(telegramId: string, transaction: any) {
    try {
      const typeEmojis = {
        DEPOSIT: 'üí≥',
        WITHDRAWAL: 'üí∏',
        REFERRAL: 'üéÅ',
        COMMISSION: 'üí∞',
        CAMPAIGN_PAYMENT: 'üìä'
      }

      const statusEmojis = {
        COMPLETED: '‚úÖ',
        PENDING: '‚è≥',
        FAILED: '‚ùå',
        CANCELLED: '‚ùå'
      }

      const text = `
${statusEmojis[transaction.status as keyof typeof statusEmojis]} *–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${transaction.status === 'COMPLETED' ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–æ–±–Ω–æ–≤–ª–µ–Ω–∞'}*

${typeEmojis[transaction.type as keyof typeof typeEmojis]} –¢–∏–ø: ${transaction.type}
üí∞ –°—É–º–º–∞: ${transaction.amount > 0 ? '+' : ''}${transaction.amount} ‚ÇΩ
üìù ${transaction.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

${transaction.status === 'COMPLETED' && transaction.amount > 0 ? 'üéâ –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!' : ''}
${transaction.status === 'FAILED' ? 'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞.' : ''}
      `.trim()

      await this.bot.telegram.sendMessage(telegramId, text, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', callback_data: 'balance' }],
            [{ text: 'üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', url: `${process.env.FRONTEND_URL}/dashboard/transactions` }]
          ]
        }
      })
    } catch (error) {
      console.error('Failed to send transaction notification:', error)
    }
  }

  async sendReferralNotification(telegramId: string, referral: any, earnings: number) {
    try {
      const text = `
üéÅ *–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!*

üë• ${referral.firstName}${referral.lastName ? ' ' + referral.lastName : ''} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!

üí∞ *–í–∞—à –¥–æ—Ö–æ–¥: +${earnings} ‚ÇΩ*

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 50% —Å –∏—Ö –¥–æ—Ö–æ–¥–æ–≤.
      `.trim()

      await this.bot.telegram.sendMessage(telegramId, text, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', callback_data: 'referral' }],
            [{ text: 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', callback_data: 'balance' }]
          ]
        }
      })
    } catch (error) {
      console.error('Failed to send referral notification:', error)
    }
  }
}

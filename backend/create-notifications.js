const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createNotifications() {
  try {
    console.log('üîî –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

    // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è testuser
    const user = await prisma.user.findFirst({
      where: { username: 'testuser' }
    });

    if (!user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å testuser –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username} (${user.id})`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notifications = await Promise.all([
      prisma.notification.create({
        data: {
          userId: user.id,
          title: '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
          message: '–í–∞—à –∑–∞–∫–∞–∑ #12345 —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º',
          type: 'SUCCESS',
          isRead: false,
        }
      }),
      prisma.notification.create({
        data: {
          userId: user.id,
          title: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          message: '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ –∑–∞–∫–∞–∑—É #12340',
          type: 'INFO',
          isRead: false,
        }
      }),
      prisma.notification.create({
        data: {
          userId: user.id,
          title: '–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
          message: '–ó–∞–∫–∞–∑ #12338 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: 1234567890',
          type: 'INFO',
          isRead: true,
        }
      }),
      prisma.notification.create({
        data: {
          userId: user.id,
          title: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã',
          type: 'ERROR',
          isRead: true,
        }
      }),
      prisma.notification.create({
        data: {
          userId: user.id,
          title: '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
          message: '–í–∞—à –∑–∞–∫–∞–∑ #12335 —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –û—Ü–µ–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫—É!',
          type: 'SUCCESS',
          isRead: true,
        }
      }),
      prisma.notification.create({
        data: {
          userId: user.id,
          title: '–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
          message: '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"',
          type: 'INFO',
          isRead: true,
        }
      })
    ]);

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notifications.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalNotifications = await prisma.notification.count({
      where: { userId: user.id }
    });
    const unreadNotifications = await prisma.notification.count({
      where: { userId: user.id, isRead: false }
    });

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`);
    console.log(`   –í—Å–µ–≥–æ: ${totalNotifications}`);
    console.log(`   –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: ${unreadNotifications}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createNotifications();

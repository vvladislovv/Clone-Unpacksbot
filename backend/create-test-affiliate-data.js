const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTestAffiliateData() {
  try {
    console.log('ü§ù Creating test affiliate data...');

    // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const mainUser = await prisma.user.findFirst();
    if (!mainUser) {
      console.log('‚ùå No users found. Please create a user first.');
      return;
    }

    console.log(`‚úÖ Found main user: ${mainUser.username} (${mainUser.id})`);

    // –°–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const timestamp = Date.now();
    const referrals = [
      {
        username: `referral1_${timestamp}`,
        email: `referral1_${timestamp}@example.com`,
        firstName: '–ê–Ω–Ω–∞',
        lastName: '–°–º–∏—Ä–Ω–æ–≤–∞',
        referredById: mainUser.id,
        isActive: true,
        isVerified: true,
        balance: 1000,
      },
      {
        username: `referral2_${timestamp}`,
        email: `referral2_${timestamp}@example.com`,
        firstName: '–ú–∏—Ö–∞–∏–ª',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        referredById: mainUser.id,
        isActive: true,
        isVerified: true,
        balance: 2500,
      },
      {
        username: `referral3_${timestamp}`,
        email: `referral3_${timestamp}@example.com`,
        firstName: '–ï–ª–µ–Ω–∞',
        lastName: '–ö–æ–∑–ª–æ–≤–∞',
        referredById: mainUser.id,
        isActive: false,
        isVerified: false,
        balance: 0,
      }
    ];

    // –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    await prisma.user.deleteMany({
      where: { referredById: mainUser.id }
    });

    // –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    for (const referralData of referrals) {
      await prisma.user.create({
        data: referralData
      });
    }

    console.log(`‚úÖ Created ${referrals.length} referrals`);

    // –°–æ–∑–¥–∞–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const referralTransactions = [
      {
        userId: mainUser.id,
        type: 'REFERRAL',
        amount: 500,
        status: 'COMPLETED',
        description: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –æ—Ç –ê–Ω–Ω—ã –°–º–∏—Ä–Ω–æ–≤–æ–π',
        metadata: { referralId: 'referral1', commissionRate: 0.05 }
      },
      {
        userId: mainUser.id,
        type: 'REFERRAL',
        amount: 750,
        status: 'COMPLETED',
        description: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –æ—Ç –ú–∏—Ö–∞–∏–ª–∞ –ü–µ—Ç—Ä–æ–≤–∞',
        metadata: { referralId: 'referral2', commissionRate: 0.05 }
      },
      {
        userId: mainUser.id,
        type: 'REFERRAL',
        amount: 300,
        status: 'PENDING',
        description: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –æ—Ç –ï–ª–µ–Ω—ã –ö–æ–∑–ª–æ–≤–æ–π',
        metadata: { referralId: 'referral3', commissionRate: 0.05 }
      }
    ];

    // –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await prisma.transaction.deleteMany({
      where: { 
        userId: mainUser.id,
        type: 'REFERRAL'
      }
    });

    // –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    for (const transactionData of referralTransactions) {
      await prisma.transaction.create({
        data: transactionData
      });
    }

    console.log(`‚úÖ Created ${referralTransactions.length} referral transactions`);

    // –ü–æ–∫–∞–∂–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await prisma.user.aggregate({
      where: { referredById: mainUser.id },
      _count: true
    });

    const activeReferrals = await prisma.user.count({
      where: { 
        referredById: mainUser.id,
        isActive: true
      }
    });

    const totalCommissions = await prisma.transaction.aggregate({
      where: {
        userId: mainUser.id,
        type: 'REFERRAL',
        status: 'COMPLETED'
      },
      _sum: { amount: true }
    });

    console.log('\nüìä Affiliate Statistics:');
    console.log(`Total referrals: ${stats._count}`);
    console.log(`Active referrals: ${activeReferrals}`);
    console.log(`Total commissions: ‚ÇΩ${Number(totalCommissions._sum.amount || 0)}`);
    console.log(`Referral code: ${mainUser.referralCode}`);

  } catch (error) {
    console.error('‚ùå Error creating test affiliate data:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestAffiliateData();

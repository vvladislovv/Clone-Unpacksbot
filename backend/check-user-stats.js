const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkUserStats() {
  try {
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏
    const users = await prisma.user.findMany({
      where: {
        OR: [
          { products: { some: {} } },
          { dealsAsBuyer: { some: {} } },
          { dealsAsSeller: { some: {} } },
          { transactions: { some: {} } },
          { referrals: { some: {} } }
        ]
      },
      select: {
        id: true,
        username: true,
        email: true,
        role: true
      }
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: ${users.length}`);
    
    for (const user of users) {
      console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username || user.email} (${user.role})`);
      
      // –ü—Ä–æ–¥—É–∫—Ç—ã
      const products = await prisma.product.count({
        where: { sellerId: user.id }
      });
      
      // –°–¥–µ–ª–∫–∏
      const deals = await prisma.deal.count({
        where: {
          OR: [
            { buyerId: user.id },
            { sellerId: user.id }
          ]
        }
      });
      
      // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const transactions = await prisma.transaction.count({
        where: { userId: user.id }
      });
      
      // –†–µ—Ñ–µ—Ä–∞–ª—ã
      const referrals = await prisma.user.count({
        where: { referredById: user.id }
      });
      
      console.log(`  - –ü—Ä–æ–¥—É–∫—Ç—ã: ${products}`);
      console.log(`  - –°–¥–µ–ª–∫–∏: ${deals}`);
      console.log(`  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${transactions}`);
      console.log(`  - –†–µ—Ñ–µ—Ä–∞–ª—ã: ${referrals}`);
      
      if (products > 0 || deals > 0 || transactions > 0 || referrals > 0) {
        console.log(`  ‚úÖ –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ API
        try {
          const axios = require('axios');
          
          const loginResponse = await axios.post('http://localhost:3000/auth/login', {
            identifier: user.email,
            password: 'password123'
          });
          
          const token = loginResponse.data.access_token;
          
          const statsResponse = await axios.get('http://localhost:3000/statistics/user?period=30d', {
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          });
          
          console.log(`  üìä API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, JSON.stringify(statsResponse.data, null, 2));
          break; // –û—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          
        } catch (apiError) {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ API: ${apiError.response?.data?.message || apiError.message}`);
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkUserStats();

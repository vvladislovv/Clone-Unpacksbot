const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://localhost:3000';
const API_URL = BASE_URL;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let authToken = '';
let testUserId = '';
let testProductId = '';
let testDealId = '';
let testPaymentId = '';
let testCampaignId = '';
let testChatId = '';
let testMessageId = '';

// –£—Ç–∏–ª–∏—Ç—ã
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const log = (message, data = null) => {
  console.log(`\nüîç ${message}`);
  if (data) {
    console.log(JSON.stringify(data, null, 2));
  }
};

const testEndpoint = async (name, method, url, data = null, headers = {}) => {
  try {
    log(`Testing ${name}`, { method, url, data });
    
    const config = {
      method,
      url: `${API_URL}${url}`,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };
    
    if (data) {
      config.data = data;
    }
    
    const response = await axios(config);
    
    log(`‚úÖ ${name} - SUCCESS`, {
      status: response.status,
      data: response.data
    });
    
    return response.data;
  } catch (error) {
    log(`‚ùå ${name} - ERROR`, {
      status: error.response?.status,
      message: error.response?.data?.message || error.message,
      data: error.response?.data
    });
    throw error;
  }
};

// –¢–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const testAuth = async () => {
  log('=== TESTING AUTHENTICATION ===');
  
  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const timestamp = Date.now();
    const registerData = await testEndpoint(
      'User Registration',
      'POST',
      '/auth/register',
      {
        username: `testuser${timestamp}`,
        email: `test${timestamp}@example.com`,
        password: 'password123',
        firstName: 'Test',
        lastName: 'User'
      }
    );
    
    authToken = registerData.token;
    testUserId = registerData.user.id;
    
    // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    const loginData = await testEndpoint(
      'User Login',
      'POST',
      '/auth/login',
      {
        identifier: `testuser${timestamp}`,
        password: 'password123'
      }
    );
    
    authToken = loginData.token;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    await testEndpoint(
      'Get Profile',
      'GET',
      '/auth/me',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    log('‚úÖ Authentication tests completed successfully');
  } catch (error) {
    log('‚ùå Authentication tests failed', error.message);
    throw error;
  }
};

// –¢–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const testUsers = async () => {
  log('=== TESTING USERS ===');
  
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    await testEndpoint(
      'Get User by ID',
      'GET',
      `/users/${testUserId}`,
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    await testEndpoint(
      'Update Profile',
      'PUT',
      '/users/profile',
      {
        firstName: 'Updated Test',
        lastName: 'Updated User'
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    await testEndpoint(
      'Get Referrals',
      'GET',
      '/users/referrals',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    await testEndpoint(
      'Get Balance',
      'GET',
      '/users/balance',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await testEndpoint(
      'Get Notifications',
      'GET',
      '/users/notifications',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    log('‚úÖ Users tests completed successfully');
  } catch (error) {
    log('‚ùå Users tests failed', error.message);
    throw error;
  }
};

// –¢–µ—Å—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤
const testProducts = async () => {
  log('=== TESTING PRODUCTS ===');
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    const timestamp = Date.now();
    const productData = await testEndpoint(
      'Create Product',
      'POST',
      '/products',
      {
        wbArticle: `WB${timestamp}`,
        title: `Test Product ${timestamp}`,
        description: 'Test product description',
        price: 1000,
        category: 'Electronics',
        brand: 'TestBrand'
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    testProductId = productData.id;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    await testEndpoint(
      'Get All Products',
      'GET',
      '/products',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
    await testEndpoint(
      'Get Product by ID',
      'GET',
      `/products/${testProductId}`,
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
    await testEndpoint(
      'Get My Products',
      'GET',
      '/products/my/products',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    await testEndpoint(
      'Update Product',
      'PUT',
      `/products/${testProductId}`,
      {
        title: 'Updated Test Product',
        description: 'Updated description',
        price: 1500
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    log('‚úÖ Products tests completed successfully');
  } catch (error) {
    log('‚ùå Products tests failed', error.message);
    throw error;
  }
};

// –¢–µ—Å—Ç—ã –∫–∞–º–ø–∞–Ω–∏–π
const testCampaigns = async () => {
  log('=== TESTING CAMPAIGNS ===');
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
    const campaignData = await testEndpoint(
      'Create Campaign',
      'POST',
      '/campaigns',
      {
        title: 'Test Campaign',
        description: 'Test campaign description',
        type: 'product',
        budget: 10000,
        pricePerClick: 50,
        maxClicks: 200,
        productId: testProductId
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    testCampaignId = campaignData.id;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–º–ø–∞–Ω–∏–π
    await testEndpoint(
      'Get All Campaigns',
      'GET',
      '/campaigns',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ ID
    await testEndpoint(
      'Get Campaign by ID',
      'GET',
      `/campaigns/${testCampaignId}`,
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π
    await testEndpoint(
      'Get My Campaigns',
      'GET',
      '/campaigns/my/campaigns',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
    await testEndpoint(
      'Update Campaign',
      'PUT',
      `/campaigns/${testCampaignId}`,
      {
        title: 'Updated Test Campaign',
        description: 'Updated campaign description',
        budget: 15000
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏
    await testEndpoint(
      'Start Campaign',
      'POST',
      `/campaigns/${testCampaignId}/start`,
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ó–∞–ø–∏—Å—å –∫–ª–∏–∫–∞
    await testEndpoint(
      'Record Campaign Click',
      'POST',
      `/campaigns/${testCampaignId}/click`,
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–∞—É–∑–∞ –∫–∞–º–ø–∞–Ω–∏–∏
    await testEndpoint(
      'Pause Campaign',
      'POST',
      `/campaigns/${testCampaignId}/pause`,
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    log('‚úÖ Campaigns tests completed successfully');
  } catch (error) {
    log('‚ùå Campaigns tests failed', error.message);
    throw error;
  }
};

// –¢–µ—Å—Ç—ã —á–∞—Ç–æ–≤
const testChats = async () => {
  log('=== TESTING CHATS ===');
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
    const chatData = await testEndpoint(
      'Create Chat',
      'POST',
      '/chat/chats',
      {
        name: 'Test Chat',
        isGroup: false
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    testChatId = chatData.id;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤
    await testEndpoint(
      'Get Chats',
      'GET',
      '/chat/chats',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageData = await testEndpoint(
      'Send Message',
      'POST',
      `/chat/chats/${testChatId}/messages`,
      {
        content: 'Test message',
        type: 'TEXT'
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    testMessageId = messageData.id;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
    await testEndpoint(
      'Get Chat Messages',
      'GET',
      `/chat/chats/${testChatId}/messages`,
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await testEndpoint(
      'Edit Message',
      'PUT',
      `/chat/messages/${testMessageId}`,
      {
        content: 'Updated test message'
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await testEndpoint(
      'Delete Message',
      'DELETE',
      `/chat/messages/${testMessageId}`,
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    log('‚úÖ Chats tests completed successfully');
  } catch (error) {
    log('‚ùå Chats tests failed', error.message);
    throw error;
  }
};

// –¢–µ—Å—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
const testTransactions = async () => {
  log('=== TESTING TRANSACTIONS ===');
  
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    await testEndpoint(
      'Get Transactions',
      'GET',
      '/transactions',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
    await testEndpoint(
      'Get All Transaction Data',
      'GET',
      '/transactions/all-data',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    await testEndpoint(
      'Get Transaction Stats',
      'GET',
      '/transactions/stats',
      { period: '30d' },
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const paymentData = await testEndpoint(
      'Create Payment for Balance',
      'POST',
      '/payment/create',
      {
        amount: 1000,
        paymentMethod: 'card',
        description: 'Balance top-up for testing',
        metadata: {
          test: true
        }
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    await testEndpoint(
      'Confirm Payment',
      'POST',
      `/payment/${paymentData.id}/confirm`,
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
    await testEndpoint(
      'Request Withdrawal',
      'POST',
      '/transactions/withdrawal',
      {
        amount: 500,
        method: 'bank_card',
        details: {
          cardNumber: '1234567890123456'
        }
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    log('‚úÖ Transactions tests completed successfully');
  } catch (error) {
    log('‚ùå Transactions tests failed', error.message);
    throw error;
  }
};

// –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π
const testPayments = async () => {
  log('=== TESTING PAYMENTS ===');
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    const paymentData = await testEndpoint(
      'Create Payment',
      'POST',
      '/payment/create',
      {
        amount: 1000,
        paymentMethod: 'card',
        description: 'Test payment',
        metadata: {
          productId: testProductId
        }
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    testPaymentId = paymentData.id;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID
    await testEndpoint(
      'Get Payment by ID',
      'GET',
      `/payment/${testPaymentId}`,
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    await testEndpoint(
      'Confirm Payment',
      'POST',
      `/payment/${testPaymentId}/confirm`,
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    log('‚úÖ Payments tests completed successfully');
  } catch (error) {
    log('‚ùå Payments tests failed', error.message);
    throw error;
  }
};

// –¢–µ—Å—Ç—ã —Å–¥–µ–ª–æ–∫
const testDeals = async () => {
  log('=== TESTING DEALS ===');
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    const dealData = await testEndpoint(
      'Create Deal',
      'POST',
      '/deals',
      {
        productId: testProductId,
        amount: 1000,
        description: 'Test deal'
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    testDealId = dealData.id;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
    await testEndpoint(
      'Get All Deals',
      'GET',
      '/deals',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ ID
    await testEndpoint(
      'Get Deal by ID',
      'GET',
      `/deals/${testDealId}`,
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö —Å–¥–µ–ª–æ–∫
    await testEndpoint(
      'Get My Deals',
      'GET',
      '/deals/my/deals',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    await testEndpoint(
      'Update Deal',
      'PUT',
      `/deals/${testDealId}`,
      {
        status: 'CONFIRMED',
        description: 'Updated test deal'
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏
    await testEndpoint(
      'Cancel Deal',
      'POST',
      `/deals/${testDealId}/cancel`,
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    log('‚úÖ Deals tests completed successfully');
  } catch (error) {
    log('‚ùå Deals tests failed', error.message);
    throw error;
  }
};

// –¢–µ—Å—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const testStatistics = async () => {
  log('=== TESTING STATISTICS ===');
  
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await testEndpoint(
      'Get User Statistics',
      'GET',
      '/statistics/user',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
    await testEndpoint(
      'Get Product Statistics',
      'GET',
      `/statistics/product/${testProductId}`,
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
    await testEndpoint(
      'Get Sales Statistics',
      'GET',
      '/statistics/sales',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    log('‚úÖ Statistics tests completed successfully');
  } catch (error) {
    log('‚ùå Statistics tests failed', error.message);
    throw error;
  }
};

// –¢–µ—Å—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
const testSupport = async () => {
  log('=== TESTING SUPPORT ===');
  
  try {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    await testEndpoint(
      'Send Support Message',
      'POST',
      '/support/message',
      {
        subject: 'Test Support Request',
        message: 'This is a test support message',
        priority: 'MEDIUM'
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    await testEndpoint(
      'Get Support Messages',
      'GET',
      '/support/messages',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    log('‚úÖ Support tests completed successfully');
  } catch (error) {
    log('‚ùå Support tests failed', error.message);
    throw error;
  }
};

// –¢–µ—Å—Ç—ã –∞–∫–∞–¥–µ–º–∏–∏
const testAcademy = async () => {
  log('=== TESTING ACADEMY ===');
  
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
    await testEndpoint(
      'Get All Courses',
      'GET',
      '/academy/courses',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ ID (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try {
      await testEndpoint(
        'Get Course by ID',
        'GET',
        '/academy/courses/test-course-id',
        null,
        { Authorization: `Bearer ${authToken}` }
      );
    } catch (error) {
      log('Course not found (expected for test)');
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    await testEndpoint(
      'Get Academy Progress',
      'GET',
      '/academy/progress',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    log('‚úÖ Academy tests completed successfully');
  } catch (error) {
    log('‚ùå Academy tests failed', error.message);
    throw error;
  }
};

// –¢–µ—Å—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
const testAffiliate = async () => {
  log('=== TESTING AFFILIATE ===');
  
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    await testEndpoint(
      'Get Affiliate Stats',
      'GET',
      '/affiliate/stats',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    await testEndpoint(
      'Get Affiliate Referrals',
      'GET',
      '/affiliate/referrals',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π
    await testEndpoint(
      'Get Affiliate Commissions',
      'GET',
      '/affiliate/commissions',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã
    try {
      await testEndpoint(
        'Create Test Commission',
        'POST',
        '/transactions/payment/create',
        {
          amount: 1000,
          paymentMethod: 'card',
          description: 'Test commission for affiliate payout',
          metadata: {
            type: 'REFERRAL',
            test: true
          }
        },
        { Authorization: `Bearer ${authToken}` }
      );
    } catch (error) {
      log('Test commission creation failed (expected)', error.message);
    }
    
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤)
    try {
      await testEndpoint(
        'Request Affiliate Payout',
        'POST',
        '/affiliate/payout',
        {
          amount: 100,
          method: 'bank_card',
          details: {
            cardNumber: '1234567890123456'
          }
        },
        { Authorization: `Bearer ${authToken}` }
      );
    } catch (error) {
      log('Affiliate payout failed (expected due to insufficient balance)', error.message);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–ª–∞—Ç
    await testEndpoint(
      'Get Affiliate Payouts',
      'GET',
      '/affiliate/payouts',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    log('‚úÖ Affiliate tests completed successfully');
  } catch (error) {
    log('‚ùå Affiliate tests failed', error.message);
    throw error;
  }
};

// –¢–µ—Å—Ç—ã Telegram
const testTelegram = async () => {
  log('=== TESTING TELEGRAM ===');
  
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram
    await testEndpoint(
      'Get Telegram User Info',
      'GET',
      '/telegram/user/123456789',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    await testEndpoint(
      'Get Telegram User Photo',
      'GET',
      '/telegram/user/123456789/photo',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    await testEndpoint(
      'Search Telegram User',
      'GET',
      '/telegram/search/testuser',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    await testEndpoint(
      'Verify Telegram User',
      'POST',
      '/telegram/verify/123456789',
      {
        firstName: 'Telegram',
        lastName: 'User',
        username: 'telegram_user'
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    log('‚úÖ Telegram tests completed successfully');
  } catch (error) {
    log('‚ùå Telegram tests failed', error.message);
    throw error;
  }
};

// –¢–µ—Å—Ç—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
const testSocial = async () => {
  log('=== TESTING SOCIAL ===');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    await testEndpoint(
      'Connect Social Account',
      'POST',
      '/social/connect',
      {
        platform: 'telegram',
        username: 'testuser',
        url: 'https://t.me/testuser'
      },
      { Authorization: `Bearer ${authToken}` }
    );
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    await testEndpoint(
      'Get Social Links',
      'GET',
      '/social/links',
      null,
      { Authorization: `Bearer ${authToken}` }
    );
    
    log('‚úÖ Social tests completed successfully');
  } catch (error) {
    log('‚ùå Social tests failed', error.message);
    throw error;
  }
};

// –¢–µ—Å—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const testUpload = async () => {
  log('=== TESTING UPLOAD ===');
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    const FormData = require('form-data');
    const fs = require('fs');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testFilePath = '/tmp/test-file.txt';
    fs.writeFileSync(testFilePath, 'Test file content');
    
    const formData = new FormData();
    formData.append('file', fs.createReadStream(testFilePath));
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    const uploadResponse = await axios.post(`${API_URL}/upload/file`, formData, {
      headers: {
        ...formData.getHeaders(),
        Authorization: `Bearer ${authToken}`
      }
    });
    
    log('‚úÖ Upload file test completed', uploadResponse.data);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(testFilePath);
    
    log('‚úÖ Upload tests completed successfully');
  } catch (error) {
    log('‚ùå Upload tests failed', error.message);
    throw error;
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const runAllTests = async () => {
  console.log('üöÄ Starting API Tests...\n');
  
  const startTime = Date.now();
  
  try {
    await testAuth();
    await delay(1000);
    
    await testUsers();
    await delay(1000);
    
    await testProducts();
    await delay(1000);
    
    await testCampaigns();
    await delay(1000);
    
    await testChats();
    await delay(1000);
    
    await testTransactions();
    await delay(1000);
    
    await testPayments();
    await delay(1000);
    
    await testDeals();
    await delay(1000);
    
    await testStatistics();
    await delay(1000);
    
    await testSupport();
    await delay(1000);
    
    await testAcademy();
    await delay(1000);
    
    await testAffiliate();
    await delay(1000);
    
    await testTelegram();
    await delay(1000);
    
    await testSocial();
    await delay(1000);
    
    await testUpload();
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    log('üéâ ALL TESTS COMPLETED SUCCESSFULLY!', {
      duration: `${duration}s`,
      totalEndpoints: 50
    });
    
  } catch (error) {
    log('üí• TESTS FAILED', error.message);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = {
  runAllTests,
  testAuth,
  testUsers,
  testProducts,
  testCampaigns,
  testChats,
  testTransactions,
  testPayments,
  testDeals,
  testStatistics,
  testSupport,
  testAcademy,
  testAffiliate,
  testTelegram,
  testSocial,
  testUpload
};

const axios = require('axios');

async function testWithUser1() {
  try {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ user1...');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è user1
    const passwords = ['password123', '123456', 'password', 'user1', 'test123'];
    
    let token = null;
    
    for (const password of passwords) {
      try {
        console.log(`–ü—Ä–æ–±—É–µ–º –ø–∞—Ä–æ–ª—å: ${password}`);
        
        const loginResponse = await axios.post('http://localhost:3000/auth/login', {
          identifier: 'user1@test.com',
          password: password
        });
        
        token = loginResponse.data.access_token;
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å –ø–∞—Ä–æ–ª–µ–º: ${password}`);
        break;
        
      } catch (error) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å –ø–∞—Ä–æ–ª–µ–º ${password}: ${error.response?.data?.message || error.message}`);
      }
    }
    
    if (!token) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∏ —Å –æ–¥–Ω–∏–º –ø–∞—Ä–æ–ª–µ–º');
      return;
    }
    
    console.log('\nüìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    
    const statsResponse = await axios.get('http://localhost:3000/statistics/user?period=30d', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:');
    console.log(JSON.stringify(statsResponse.data, null, 2));
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const stats = statsResponse.data;
    console.log('\nüìã –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`- –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${stats.totalProducts}`);
    console.log(`- –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${stats.activeProducts}`);
    console.log(`- –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalDeals}`);
    console.log(`- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${stats.completedDeals}`);
    console.log(`- –î–æ—Ö–æ–¥—ã: ‚ÇΩ${stats.totalRevenue}`);
    console.log(`- –†–∞—Å—Ö–æ–¥—ã: ‚ÇΩ${stats.totalSpent}`);
    console.log(`- –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.totalReferrals}`);
    console.log(`- –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ‚ÇΩ${stats.referralEarnings}`);
    console.log(`- –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.totalTransactions}`);
    console.log(`- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.completedTransactions}`);
    console.log(`- –û–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.pendingTransactions}`);
    console.log(`- –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥: ‚ÇΩ${stats.netIncome}`);
    console.log(`- –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${stats.completionRate}%`);
    console.log(`- –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ‚ÇΩ${stats.averageTransactionAmount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

testWithUser1();

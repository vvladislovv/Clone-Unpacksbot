import { Controller, Get } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';

@Controller('test')
export class TestController {
  constructor(private prisma: PrismaService) {}

  @Get('transactions')
  async getTransactions() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const firstUser = await this.prisma.user.findFirst();
      if (!firstUser) {
        return { message: 'No users found', data: [] };
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const transactions = await this.prisma.transaction.findMany({
        where: { userId: firstUser.id },
        orderBy: { createdAt: 'desc' },
        take: 50
      });

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      const formattedTransactions = transactions.map(transaction => ({
        id: transaction.id,
        type: this.getTransactionTypeForFrontend(transaction.type),
        amount: Number(transaction.amount),
        description: transaction.description || this.getTransactionDescription(transaction.type),
        status: transaction.status.toLowerCase(),
        createdAt: transaction.createdAt.toISOString(),
        category: this.getTransactionCategory(transaction.type),
        paymentMethod: this.getPaymentMethodFromType(transaction.type)
      }));

      return { data: formattedTransactions, message: 'Success' };
    } catch (error) {
      console.error('Error getting transactions:', error);
      return { message: 'Error getting transactions', error: error.message };
    }
  }

  private getTransactionTypeForFrontend(type: string): 'income' | 'expense' {
    switch (type) {
      case 'DEPOSIT':
      case 'REFERRAL':
      case 'COMMISSION':
        return 'income';
      case 'WITHDRAWAL':
      case 'PAYMENT':
      case 'CAMPAIGN_PAYMENT':
        return 'expense';
      default:
        return 'expense';
    }
  }

  private getTransactionDescription(type: string): string {
    switch (type) {
      case 'DEPOSIT':
        return '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞';
      case 'WITHDRAWAL':
        return '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤';
      case 'COMMISSION':
        return '–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã';
      case 'REFERRAL':
        return '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è';
      case 'CAMPAIGN_PAYMENT':
        return '–û–ø–ª–∞—Ç–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏';
      case 'PAYMENT':
        return '–ü–ª–∞—Ç–µ–∂ –∑–∞ —Ç–æ–≤–∞—Ä';
      default:
        return '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è';
    }
  }

  private getTransactionCategory(type: string): string {
    switch (type) {
      case 'DEPOSIT':
        return '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ';
      case 'WITHDRAWAL':
        return '–í—ã–≤–æ–¥';
      case 'COMMISSION':
        return '–ö–æ–º–∏—Å—Å–∏—è';
      case 'REFERRAL':
        return '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ';
      case 'CAMPAIGN_PAYMENT':
        return '–†–µ–∫–ª–∞–º–∞';
      case 'PAYMENT':
        return '–ü–æ–∫—É–ø–∫–∞';
      default:
        return '–î—Ä—É–≥–æ–µ';
    }
  }

  private getPaymentMethodFromType(type: string): string {
    switch (type) {
      case 'DEPOSIT':
      case 'WITHDRAWAL':
        return 'card';
      case 'COMMISSION':
      case 'REFERRAL':
        return 'bank';
      case 'CAMPAIGN_PAYMENT':
      case 'PAYMENT':
        return 'wallet';
      default:
        return 'card';
    }
  }
}


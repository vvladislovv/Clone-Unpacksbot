import { Injectable, Logger } from '@nestjs/common';
import { ChatService } from '../chat/chat.service';
import { PrismaService } from '../prisma/prisma.service';

@Injectable()
export class AdminService {
  private readonly logger = new Logger(AdminService.name);
  
  constructor(
    private prisma: PrismaService,
    private chatService: ChatService
  ) {}

  async getStats() {
    this.logger.log('üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∫–∏...');
    
    const [
      totalUsers,
      totalProducts,
      totalDeals,
      totalTransactions,
      activeUsers,
      totalRevenue,
      newMessages,
    ] = await Promise.all([
      this.prisma.user.count(),
      this.prisma.product.count(),
      this.prisma.deal.count(),
      this.prisma.transaction.count(),
      this.prisma.user.count({ where: { isActive: true } }),
      this.prisma.transaction.aggregate({
        where: { status: 'COMPLETED' },
        _sum: { amount: true },
      }),
      this.prisma.supportTicket.count({ where: { status: 'OPEN' } }),
    ]);

    this.logger.log(`üìä –ü–æ–ª—É—á–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏=${totalUsers}, —Ç–æ–≤–∞—Ä—ã=${totalProducts}, —Å–¥–µ–ª–∫–∏=${totalDeals}, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏=${totalTransactions}, –∞–∫—Ç–∏–≤–Ω—ã–µ=${activeUsers}, —Å–æ–æ–±—â–µ–Ω–∏—è=${newMessages}`);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    const allProducts = await this.prisma.product.count();
    const activeProducts = await this.prisma.product.count({ where: { isActive: true } });
    this.logger.log(`üì¶ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: –≤—Å–µ–≥–æ=${allProducts}, –∞–∫—Ç–∏–≤–Ω—ã—Ö=${activeProducts}`);

    // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);

    const [
      usersLastMonth,
      productsLastMonth,
      revenueLastMonth,
      messagesLastMonth,
      dealsLastMonth,
    ] = await Promise.all([
      this.prisma.user.count({
        where: { createdAt: { gte: oneMonthAgo } }
      }),
      this.prisma.product.count({
        where: { createdAt: { gte: oneMonthAgo } }
      }),
      this.prisma.transaction.aggregate({
        where: { 
          status: 'COMPLETED',
          createdAt: { gte: oneMonthAgo }
        },
        _sum: { amount: true },
      }),
      this.prisma.supportTicket.count({
        where: { 
          status: 'OPEN',
          createdAt: { gte: oneMonthAgo }
        }
      }),
      this.prisma.deal.count({
        where: { createdAt: { gte: oneMonthAgo } }
      }),
    ]);

    const usersChange = totalUsers > 0 ? Math.round((usersLastMonth / totalUsers) * 100) : 0;
    const productsChange = totalProducts > 0 ? Math.round((productsLastMonth / totalProducts) * 100) : 0;
    const totalRevenueAmount = Number(totalRevenue._sum.amount || 0);
    const revenueLastMonthAmount = Number(revenueLastMonth._sum.amount || 0);
    const revenueChange = totalRevenueAmount > 0 ? 
      Math.round((revenueLastMonthAmount / totalRevenueAmount) * 100) : 0;
    const messagesChange = newMessages > 0 ? Math.round((messagesLastMonth / newMessages) * 100) : 0;
    const dealsChange = totalDeals > 0 ? Math.round((dealsLastMonth / totalDeals) * 100) : 0;

    const result = {
      totalUsers,
      totalProducts,
      totalDeals,
      totalTransactions,
      activeUsers,
      totalRevenue: totalRevenueAmount,
      newMessages,
      usersChange,
      productsChange,
      revenueChange,
      messagesChange,
      dealsChange,
    };

    this.logger.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${JSON.stringify(result)}`);
    return result;
  }

  async getMessages() {
    this.logger.log('üí¨ –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏...');
    
    const messages = await this.prisma.supportTicket.findMany({
      include: {
        user: {
          select: {
            id: true,
            username: true,
            firstName: true,
            lastName: true,
          },
        },
      },
      orderBy: { createdAt: 'desc' },
    });

    this.logger.log(`üí¨ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}`);
    this.logger.log(`üí¨ –ü–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è: ${JSON.stringify(messages.slice(0, 3).map(m => ({ id: m.id, subject: m.subject, user: m.user.firstName + ' ' + m.user.lastName, status: m.status })))}`);
    
    return messages;
  }

  async replyToMessage(messageId: string, replyDto: any) {
    this.logger.log(`üí¨ –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: ${messageId}`);
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      const supportTicket = await this.prisma.supportTicket.findUnique({
        where: { id: messageId },
        include: {
          user: {
            select: {
              id: true,
              username: true,
              firstName: true,
              lastName: true,
              telegramId: true
            }
          }
        }
      });

      if (!supportTicket) {
        this.logger.error(`‚ùå –¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${messageId}`);
        throw new Error('Support ticket not found');
      }

      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
      let adminUser = await this.prisma.user.findFirst({
        where: { role: 'ADMIN' }
      });

      if (!adminUser) {
        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        adminUser = await this.prisma.user.create({
          data: {
            username: 'admin',
            firstName: 'Admin',
            lastName: 'System',
            role: 'ADMIN',
            isActive: true,
            isVerified: true,
            email: 'admin@system.local'
          }
        });
        this.logger.log(`üë§ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${adminUser.id}`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
      const updatedTicket = await this.prisma.supportTicket.update({
        where: { id: messageId },
        data: {
          status: 'IN_PROGRESS',
          assigneeId: adminUser.id,
          updatedAt: new Date()
        },
        include: {
          user: {
            select: {
              id: true,
              username: true,
              firstName: true,
              lastName: true,
              telegramId: true
            }
          }
        }
      });

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const adminChat = await this.chatService.getAdminChat(supportTicket.userId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
      const adminParticipant = await this.prisma.chatParticipant.findFirst({
        where: {
          chatId: adminChat.id,
          userId: adminUser.id
        }
      });

      if (!adminParticipant) {
        await this.prisma.chatParticipant.create({
          data: {
            chatId: adminChat.id,
            userId: adminUser.id,
            isAdmin: true
          }
        });
        this.logger.log(`üë§ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç: ${adminChat.id}`);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞
      const chatMessage = await this.prisma.message.create({
        data: {
          chatId: adminChat.id,
          senderId: adminUser.id,
          type: 'TEXT',
          content: replyDto.content,
          metadata: {
            isFromAdmin: true,
            supportTicketId: messageId,
            adminReply: true,
            originalTicket: {
              id: supportTicket.id,
              subject: supportTicket.subject
            }
          }
        },
        include: {
          sender: {
            select: {
              id: true,
              username: true,
              firstName: true,
              lastName: true,
              avatar: true
            }
          }
        }
      });

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.prisma.notification.create({
        data: {
          userId: supportTicket.userId,
          title: '–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
          message: `–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: "${replyDto.content}"`,
          type: 'INFO',
          metadata: {
            supportTicketId: messageId,
            chatId: adminChat.id,
            messageId: chatMessage.id,
            isAdminReply: true
          }
        }
      });

      this.logger.log(`‚úÖ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç ${adminChat.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${supportTicket.user.firstName} ${supportTicket.user.lastName}`);
      
      return {
        success: true,
        ticket: updatedTicket,
        chatMessage: chatMessage,
        chatId: adminChat.id,
        reply: '–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —á–∞—Ç',
        adminUser: {
          id: adminUser.id,
          username: adminUser.username,
          firstName: adminUser.firstName,
          lastName: adminUser.lastName
        }
      };
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
      throw error;
    }
  }

  async getChatMessages() {
    this.logger.log('üí¨ –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–æ–≤ —Å –∞–¥–º–∏–Ω–æ–º
    const messages = await this.prisma.message.findMany({
      where: {
        chat: {
          isGroup: false // –ê–¥–º–∏–Ω—Å–∫–∏–µ —á–∞—Ç—ã –æ–±—ã—á–Ω–æ –Ω–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ
        }
      },
      include: {
        sender: {
          select: {
            id: true,
            username: true,
            firstName: true,
            lastName: true,
            avatar: true
          }
        },
        chat: {
          include: {
            participants: {
              select: {
                id: true,
                user: {
                  select: {
                    id: true,
                    username: true,
                    firstName: true,
                    lastName: true
                  }
                }
              }
            }
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 50
    });

    this.logger.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–æ–≤`);
    
    return messages;
  }

  async getUsers() {
    this.logger.log('üë• –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const users = await this.prisma.user.findMany({
      select: {
        id: true,
        username: true,
        email: true,
        firstName: true,
        lastName: true,
        role: true,
        isActive: true,
        isVerified: true,
        balance: true,
        createdAt: true,
        lastLoginAt: true,
      },
      orderBy: { createdAt: 'desc' },
    });

    this.logger.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    this.logger.log(`üë• –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${JSON.stringify(users.reduce((acc, user) => { acc[user.role] = (acc[user.role] || 0) + 1; return acc; }, {}))}`);
    this.logger.log(`üë• –ü–µ—Ä–≤—ã–µ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${JSON.stringify(users.slice(0, 3).map(u => ({ id: u.id, name: u.firstName + ' ' + u.lastName, role: u.role, email: u.email })))}`);
    
    return users;
  }

  async updateUser(userId: string, updateUserDto: any) {
    this.logger.log(`‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!userId) {
        throw new Error('User ID is required');
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateData: any = {};
      
      if (updateUserDto.firstName) updateData.firstName = updateUserDto.firstName;
      if (updateUserDto.lastName !== undefined) updateData.lastName = updateUserDto.lastName;
      if (updateUserDto.email) updateData.email = updateUserDto.email;
      if (updateUserDto.phone !== undefined) updateData.phone = updateUserDto.phone;
      if (updateUserDto.username !== undefined) updateData.username = updateUserDto.username;
      if (updateUserDto.role) updateData.role = updateUserDto.role;
      if (updateUserDto.verified !== undefined) updateData.isVerified = updateUserDto.verified;
      if (updateUserDto.password) {
        updateData.passwordHash = await this.hashPassword(updateUserDto.password);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await this.prisma.user.findUnique({
        where: { id: userId }
      });

      if (!existingUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è email, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
      if (updateData.email && updateData.email !== existingUser.email) {
        const emailExists = await this.prisma.user.findUnique({
          where: { email: updateData.email }
        });

        if (emailExists) {
          throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
      }

      const user = await this.prisma.user.update({
        where: { id: userId },
        data: updateData,
        select: {
          id: true,
          username: true,
          email: true,
          firstName: true,
          lastName: true,
          role: true,
          isActive: true,
          isVerified: true,
          balance: true,
          updatedAt: true,
        },
      });

      this.logger.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${user.id}`);
      return user;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      this.logger.error(`‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}`);
      this.logger.error(`‚ùå –ò–º—è –æ—à–∏–±–∫–∏: ${error.name}`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—à–∏–±–æ–∫
      if (
        error.code === 'P2002' ||
        error.name === 'PrismaClientKnownRequestError' ||
        error.message.includes('Unique constraint failed') ||
        error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') ||
        error.message.includes('already exists')
      ) {
        const errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
        this.logger.warn(`‚ö†Ô∏è ${errorMessage}`);
        throw new Error(errorMessage);
      }
      
      throw error;
    }
  }

  async blockUser(userId: string, reason: string) {
    this.logger.log(`üö´ –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –ø—Ä–∏—á–∏–Ω–∞: ${reason}`);
    
    return this.prisma.user.update({
      where: { id: userId },
      data: { 
        isActive: false,
        isBlocked: true,
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –±—É–¥—É—â–µ–º
      },
      select: {
        id: true,
        username: true,
        isActive: true,
        isBlocked: true,
        updatedAt: true,
      },
    });
  }

  async unblockUser(userId: string) {
    this.logger.log(`‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    return this.prisma.user.update({
      where: { id: userId },
      data: { 
        isActive: true,
        isBlocked: false,
      },
      select: {
        id: true,
        username: true,
        isActive: true,
        isBlocked: true,
        updatedAt: true,
      },
    });
  }

  async verifyUser(userId: string) {
    return this.prisma.user.update({
      where: { id: userId },
      data: { isVerified: true },
      select: {
        id: true,
        username: true,
        isVerified: true,
        updatedAt: true,
      },
    });
  }

  async createUser(createUserDto: any) {
    this.logger.log(`üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º: ${createUserDto.firstName} ${createUserDto.lastName}`);
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!createUserDto.firstName) {
        throw new Error('First name is required');
      }
      if (!createUserDto.email) {
        throw new Error('Email is required');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
      const existingUser = await this.prisma.user.findUnique({
        where: { email: createUserDto.email }
      });

      if (existingUser) {
        this.logger.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${createUserDto.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${createUserDto.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }

      const user = await this.prisma.user.create({
        data: {
          firstName: createUserDto.firstName,
          lastName: createUserDto.lastName || '',
          email: createUserDto.email,
          phone: createUserDto.phone || null,
          username: createUserDto.username || null,
          role: createUserDto.role || 'BUYER',
          isActive: true,
          isVerified: createUserDto.verified || false,
          passwordHash: createUserDto.password ? await this.hashPassword(createUserDto.password) : null,
        },
        select: {
          id: true,
          username: true,
          email: true,
          firstName: true,
          lastName: true,
          role: true,
          isActive: true,
          isVerified: true,
          createdAt: true,
          updatedAt: true,
        },
      });

      this.logger.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–æ–º: ${user.id}`);
      return user;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      this.logger.error(`‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}`);
      this.logger.error(`‚ùå –ò–º—è –æ—à–∏–±–∫–∏: ${error.name}`);
      this.logger.error(`‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:`, error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—à–∏–±–æ–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è email
      if (
        error.code === 'P2002' ||
        error.name === 'PrismaClientKnownRequestError' ||
        error.message.includes('Unique constraint failed') ||
        error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') ||
        error.message.includes('already exists')
      ) {
        const errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
        this.logger.warn(`‚ö†Ô∏è ${errorMessage}`);
        throw new Error(errorMessage);
      }
      
      throw error;
    }
  }

  private async hashPassword(password: string): Promise<string> {
    // –ü—Ä–æ—Å—Ç–∞—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ bcrypt
    return Buffer.from(password).toString('base64');
  }

  async getProducts() {
    this.logger.log('üì¶ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã...');
    
    const products = await this.prisma.product.findMany({
      include: {
        seller: {
          select: {
            id: true,
            username: true,
            firstName: true,
            lastName: true,
          },
        },
      },
      orderBy: { createdAt: 'desc' },
    });

    this.logger.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    this.logger.log(`üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${products.filter(p => p.isActive).length}`);
    this.logger.log(`üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: ${JSON.stringify(products.reduce((acc, product) => { acc[product.category] = (acc[product.category] || 0) + 1; return acc; }, {}))}`);
    this.logger.log(`üì¶ –ü–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞: ${JSON.stringify(products.slice(0, 3).map(p => ({ id: p.id, title: p.title, price: p.price, category: p.category, seller: p.seller.firstName + ' ' + p.seller.lastName, isActive: p.isActive })))}`);
    
    return products;
  }

  async createProduct(createProductDto: any) {
    this.logger.log(`üì¶ –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –∞–¥–º–∏–Ω–æ–º: ${createProductDto.title}`);
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!createProductDto.title) {
        this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: Title is required');
        throw new Error('Title is required');
      }
      if (!createProductDto.wbArticle) {
        this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: WB Article is required');
        throw new Error('WB Article is required');
      }
      if (!createProductDto.category) {
        this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: Category is required');
        throw new Error('Category is required');
      }

      this.logger.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞, –∏—â–µ–º –∞–¥–º–∏–Ω–∞...');

      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
      let adminUser = await this.prisma.user.findFirst({
        where: { role: 'ADMIN' }
      });

      if (!adminUser) {
        this.logger.log('üë§ –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...');
        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        adminUser = await this.prisma.user.create({
          data: {
            username: 'admin',
            firstName: 'Admin',
            lastName: 'System',
            role: 'ADMIN',
            isActive: true,
            isVerified: true,
            email: 'admin@system.local'
          }
        });
        this.logger.log(`üë§ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${adminUser.id}`);
      } else {
        this.logger.log(`üë§ –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${adminUser.id}`);
      }

      const { price, images, ...rest } = createProductDto;
      
      this.logger.log(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞: rest=${JSON.stringify(rest)}, price=${price}, images=${JSON.stringify(images)}`);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
      let productImages: string[] = images || [];
      
      if (!images || images.length === 0) {
        this.logger.log(`üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${createProductDto.title}`);
        // –î–ª—è –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        productImages = [
          `https://picsum.photos/400/400?random=${Math.random()}`,
          `https://picsum.photos/400/400?random=${Math.random()}`,
          `https://picsum.photos/400/400?random=${Math.random()}`
        ];
      }

      this.logger.log(`üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: price=${price ? parseFloat(price) : 0}, images=${productImages.length}, sellerId=${adminUser.id}`);

      const product = await this.prisma.product.create({
        data: {
          ...rest,
          price: price ? parseFloat(price) : 0,
          images: productImages,
          sellerId: adminUser.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∞–¥–º–∏–Ω–∞
        },
        include: {
          seller: {
            select: {
              id: true,
              username: true,
              firstName: true,
              lastName: true,
            },
          },
        },
      });

      this.logger.log(`‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–æ–º ${adminUser.username} —Å ${productImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${product.id}`);
      return product;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${error.message}`);
      this.logger.error(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
      throw error;
    }
  }

  async updateProduct(productId: string, updateProductDto: any) {
    return this.prisma.product.update({
      where: { id: productId },
      data: updateProductDto,
      include: {
        seller: {
          select: {
            id: true,
            username: true,
            firstName: true,
            lastName: true,
          },
        },
      },
    });
  }

  async deleteProduct(productId: string) {
    return this.prisma.product.delete({
      where: { id: productId },
    });
  }

  async getDeals() {
    this.logger.log('ü§ù –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏...');
    
    const deals = await this.prisma.deal.findMany({
      include: {
        buyer: {
          select: {
            id: true,
            username: true,
            firstName: true,
            lastName: true,
          },
        },
        seller: {
          select: {
            id: true,
            username: true,
            firstName: true,
            lastName: true,
          },
        },
        product: {
          select: {
            id: true,
            title: true,
            price: true,
          },
        },
      },
      orderBy: { createdAt: 'desc' },
    });

    this.logger.log(`ü§ù –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫: ${deals.length}`);
    this.logger.log(`ü§ù –°—Ç–∞—Ç—É—Å—ã —Å–¥–µ–ª–æ–∫: ${JSON.stringify(deals.reduce((acc, deal) => { acc[deal.status] = (acc[deal.status] || 0) + 1; return acc; }, {}))}`);
    this.logger.log(`ü§ù –ü–µ—Ä–≤—ã–µ 3 —Å–¥–µ–ª–∫–∏: ${JSON.stringify(deals.slice(0, 3).map(d => ({ id: d.id, amount: d.amount, status: d.status, buyer: d.buyer.firstName + ' ' + d.buyer.lastName, seller: d.seller.firstName + ' ' + d.seller.lastName, product: d.product.title })))}`);
    
    return deals;
  }

  async updateDealStatus(dealId: string, status: string) {
    this.logger.log(`ü§ù –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ ${dealId} –Ω–∞ ${status}`);
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
      const validStatuses = ['PENDING', 'CONFIRMED', 'SHIPPED', 'COMPLETED', 'CANCELLED', 'DISPUTED'];
      if (!validStatuses.includes(status)) {
        throw new Error(`Invalid status: ${status}. Valid statuses: ${validStatuses.join(', ')}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–¥–µ–ª–∫–∞
      const existingDeal = await this.prisma.deal.findUnique({
        where: { id: dealId }
      });

      if (!existingDeal) {
        throw new Error(`Deal with id ${dealId} not found`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
      const updatedDeal = await this.prisma.deal.update({
        where: { id: dealId },
        data: { 
          status: status as any,
          updatedAt: new Date()
        },
        include: {
          buyer: {
            select: {
              id: true,
              username: true,
              firstName: true,
              lastName: true,
            },
          },
          seller: {
            select: {
              id: true,
              username: true,
              firstName: true,
              lastName: true,
            },
          },
          product: {
            select: {
              id: true,
              title: true,
              price: true,
            },
          },
        },
      });

      this.logger.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ ${dealId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${status}`);
      return updatedDeal;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏: ${error.message}`);
      throw error;
    }
  }

  async closeDeal(dealId: string) {
    this.logger.log(`ü§ù –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É ${dealId}`);
    return this.updateDealStatus(dealId, 'COMPLETED');
  }

  async openDeal(dealId: string) {
    this.logger.log(`ü§ù –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É ${dealId}`);
    return this.updateDealStatus(dealId, 'PENDING');
  }

  async cancelDeal(dealId: string) {
    this.logger.log(`ü§ù –û—Ç–º–µ–Ω—è–µ–º —Å–¥–µ–ª–∫—É ${dealId}`);
    return this.updateDealStatus(dealId, 'CANCELLED');
  }

  async disputeDeal(dealId: string) {
    this.logger.log(`ü§ù –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–¥–µ–ª–∫—É ${dealId} –≤ —Å–ø–æ—Ä`);
    return this.updateDealStatus(dealId, 'DISPUTED');
  }
}
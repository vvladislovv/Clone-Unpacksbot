import { LoggerService, LogLevel } from '@nestjs/common';

export class CustomLoggerService implements LoggerService {
  private context?: string;

  constructor(context?: string) {
    this.context = context;
  }

  log(message: string, context?: string) {
    const timestamp = new Date().toISOString();
    const ctx = context || this.context || 'Application';
    console.log(`[${timestamp}] [${ctx}] ${message}`);
  }

  error(message: string, trace?: string, context?: string) {
    const timestamp = new Date().toISOString();
    const ctx = context || this.context || 'Application';
    console.error(`[${timestamp}] [${ctx}] ‚ùå ERROR: ${message}`);
    if (trace) {
      console.error(`[${timestamp}] [${ctx}] üìç Stack Trace: ${trace}`);
    }
  }

  warn(message: string, context?: string) {
    const timestamp = new Date().toISOString();
    const ctx = context || this.context || 'Application';
    console.warn(`[${timestamp}] [${ctx}] ‚ö†Ô∏è  WARN: ${message}`);
  }

  debug(message: string, context?: string) {
    const timestamp = new Date().toISOString();
    const ctx = context || this.context || 'Application';
    console.debug(`[${timestamp}] [${ctx}] üêõ DEBUG: ${message}`);
  }

  verbose(message: string, context?: string) {
    const timestamp = new Date().toISOString();
    const ctx = context || this.context || 'Application';
    console.log(`[${timestamp}] [${ctx}] üìù VERBOSE: ${message}`);
  }
}

export const LOG_LEVELS: LogLevel[] = ['error', 'warn', 'log', 'debug', 'verbose'];

export const LOG_CONFIG = {
  // –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
  development: ['log', 'error', 'warn', 'debug', 'verbose'],
  production: ['log', 'error', 'warn'],
  test: ['error', 'warn'],
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
export const LOG_COLORS = {
  error: '\x1b[31m', // –ö—Ä–∞—Å–Ω—ã–π
  warn: '\x1b[33m',  // –ñ–µ–ª—Ç—ã–π
  log: '\x1b[32m',   // –ó–µ–ª–µ–Ω—ã–π
  debug: '\x1b[36m', // –ì–æ–ª—É–±–æ–π
  verbose: '\x1b[35m', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
  reset: '\x1b[0m'   // –°–±—Ä–æ—Å
};



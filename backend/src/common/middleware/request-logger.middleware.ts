import { Injectable, NestMiddleware, Logger } from '@nestjs/common';
import { Request, Response, NextFunction } from 'express';

@Injectable()
export class RequestLoggerMiddleware implements NestMiddleware {
  private readonly logger = new Logger('RequestLogger');

  use(req: Request, res: Response, next: NextFunction) {
    const { method, originalUrl, ip } = req;
    const userAgent = req.get('User-Agent') || '';
    const startTime = Date.now();

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    this.logger.log(
      `üåê ${method} ${originalUrl} - ${ip} - ${userAgent}`,
    );

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const originalSend = res.send;
    res.send = function (body) {
      const duration = Date.now() - startTime;
      const statusCode = res.statusCode;
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      if (statusCode >= 400) {
        Logger.prototype.error.call(
          this.logger,
          `‚ùå ${method} ${originalUrl} - ${statusCode} - ${duration}ms`,
        );
      } else {
        Logger.prototype.log.call(
          this.logger,
          `‚úÖ ${method} ${originalUrl} - ${statusCode} - ${duration}ms`,
        );
      }

      return originalSend.call(this, body);
    }.bind(this);

    next();
  }
}



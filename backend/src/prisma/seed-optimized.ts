import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');

  // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
  const settings = await prisma.settings.create({
    data: {
      referralCommission: 0.05, // 5%
      platformCommission: 0.1,  // 10%
      minWithdrawalAmount: 100,
      maxWithdrawalAmount: 100000,
      maintenanceMode: false,
      registrationEnabled: true,
    },
  });
  console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
  const adminPassword = await bcrypt.hash('admin123', 10);
  const admin = await prisma.user.create({
    data: {
      username: 'admin',
      email: 'admin@unpacksbot.com',
      firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      lastName: '–°–∏—Å—Ç–µ–º—ã',
      passwordHash: adminPassword,
      role: 'ADMIN',
      isActive: true,
      isVerified: true,
      balance: 10000,
      referralCode: 'ADMIN001',
    },
  });
  console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω');

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const users = [];
  for (let i = 1; i <= 10; i++) {
    const password = await bcrypt.hash(`user${i}123`, 10);
    const user = await prisma.user.create({
      data: {
        username: `user${i}`,
        email: `user${i}@test.com`,
        firstName: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`,
        lastName: `${i}`,
        passwordHash: password,
        role: i <= 3 ? 'SELLER' : i <= 6 ? 'BLOGGER' : 'MANAGER',
        isActive: true,
        isVerified: i <= 5,
        balance: Math.floor(Math.random() * 5000) + 1000,
        referralCode: `USER${i.toString().padStart(3, '0')}`,
        referredById: i > 1 ? users[Math.floor(Math.random() * (i - 1))].id : null,
      },
    });
    users.push(user);
  }
  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
  const products = [];
  const categories = ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–û–¥–µ–∂–¥–∞', '–î–æ–º –∏ —Å–∞–¥', '–°–ø–æ—Ä—Ç', '–ö—Ä–∞—Å–æ—Ç–∞'];
  const brands = ['Samsung', 'Apple', 'Nike', 'Adidas', 'L\'Oreal', 'Maybelline'];

  for (let i = 1; i <= 20; i++) {
    const product = await prisma.product.create({
      data: {
        wbArticle: `WB${i.toString().padStart(6, '0')}`,
        title: `–¢–æ–≤–∞—Ä ${i} - ${brands[Math.floor(Math.random() * brands.length)]}`,
        description: `–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ${i}. –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞.`,
        price: Math.floor(Math.random() * 10000) + 1000,
        images: [
          `https://picsum.photos/400/400?random=${i}_1`,
          `https://picsum.photos/400/400?random=${i}_2`,
        ],
        category: categories[Math.floor(Math.random() * categories.length)],
        brand: brands[Math.floor(Math.random() * brands.length)],
        rating: Math.random() * 2 + 3, // 3-5 –∑–≤–µ–∑–¥
        reviewsCount: Math.floor(Math.random() * 100),
        sellerId: users[Math.floor(Math.random() * 3)].id, // –ü–µ—Ä–≤—ã–µ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–æ–¥–∞–≤—Ü—ã
      },
    });
    products.push(product);
  }
  console.log('‚úÖ –¢–æ–≤–∞—Ä—ã —Å–æ–∑–¥–∞–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  for (let i = 1; i <= 50; i++) {
    const user = users[Math.floor(Math.random() * users.length)];
    const types = ['DEPOSIT', 'WITHDRAWAL', 'COMMISSION', 'REFERRAL', 'CAMPAIGN_PAYMENT'];
    const statuses = ['PENDING', 'COMPLETED', 'FAILED', 'CANCELLED'];
    
    await prisma.transaction.create({
      data: {
        userId: user.id,
        type: types[Math.floor(Math.random() * types.length)] as any,
        amount: Math.floor(Math.random() * 5000) + 100,
        commission: Math.floor(Math.random() * 100),
        status: statuses[Math.floor(Math.random() * statuses.length)] as any,
        description: `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${i}`,
        externalId: `EXT${i.toString().padStart(8, '0')}`,
        metadata: {
          source: 'test',
          timestamp: new Date().toISOString(),
        },
      },
    });
  }
  console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
  for (let i = 1; i <= 30; i++) {
    const user = users[Math.floor(Math.random() * users.length)];
    const methods = ['CARD', 'BANK_TRANSFER', 'CRYPTO', 'PAYPAL', 'YOOMONEY'];
    const statuses = ['PENDING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED'];
    
    await prisma.payment.create({
      data: {
        userId: user.id,
        amount: Math.floor(Math.random() * 3000) + 500,
        method: methods[Math.floor(Math.random() * methods.length)] as any,
        status: statuses[Math.floor(Math.random() * statuses.length)] as any,
        externalId: `PAY${i.toString().padStart(8, '0')}`,
        description: `–ü–ª–∞—Ç–µ–∂ ${i}`,
        metadata: {
          source: 'test',
          timestamp: new Date().toISOString(),
        },
      },
    });
  }
  console.log('‚úÖ –ü–ª–∞—Ç–µ–∂–∏ —Å–æ–∑–¥–∞–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫–∏
  for (let i = 1; i <= 15; i++) {
    const buyer = users[Math.floor(Math.random() * users.length)];
    const seller = users[Math.floor(Math.random() * 3)]; // –ü–µ—Ä–≤—ã–µ 3 - –ø—Ä–æ–¥–∞–≤—Ü—ã
    const product = products[Math.floor(Math.random() * products.length)];
    const statuses = ['PENDING', 'CONFIRMED', 'COMPLETED', 'CANCELLED', 'DISPUTED'];
    
    await prisma.deal.create({
      data: {
        buyerId: buyer.id,
        sellerId: seller.id,
        productId: product.id,
        amount: product.price,
        status: statuses[Math.floor(Math.random() * statuses.length)] as any,
        description: `–°–¥–µ–ª–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä—É: ${product.title}`,
        metadata: {
          source: 'test',
          timestamp: new Date().toISOString(),
        },
      },
    });
  }
  console.log('‚úÖ –°–¥–µ–ª–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º —á–∞—Ç—ã
  const chats = [];
  for (let i = 1; i <= 5; i++) {
    const chat = await prisma.chat.create({
      data: {
        name: `–ß–∞—Ç ${i}`,
        isGroup: i > 2,
      },
    });
    chats.push(chat);
  }
  console.log('‚úÖ –ß–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤
  for (const chat of chats) {
    const participants = users.slice(0, Math.floor(Math.random() * 5) + 2);
    for (const user of participants) {
      await prisma.chatParticipant.create({
        data: {
          chatId: chat.id,
          userId: user.id,
          isAdmin: user.role === 'ADMIN',
        },
      });
    }
  }
  console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
  for (let i = 1; i <= 100; i++) {
    const chat = chats[Math.floor(Math.random() * chats.length)];
    const sender = users[Math.floor(Math.random() * users.length)];
    const types = ['TEXT', 'IMAGE', 'FILE', 'SYSTEM'];
    
    await prisma.message.create({
      data: {
        chatId: chat.id,
        senderId: sender.id,
        type: types[Math.floor(Math.random() * types.length)] as any,
        content: `–°–æ–æ–±—â–µ–Ω–∏–µ ${i}: –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?`,
        metadata: {
          source: 'test',
          timestamp: new Date().toISOString(),
        },
      },
    });
  }
  console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
  for (let i = 1; i <= 20; i++) {
    const user = users[Math.floor(Math.random() * users.length)];
    const priorities = ['LOW', 'MEDIUM', 'HIGH', 'URGENT'];
    const statuses = ['OPEN', 'IN_PROGRESS', 'CLOSED', 'RESOLVED'];
    
    await prisma.supportTicket.create({
      data: {
        userId: user.id,
        subject: `–¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ${i}`,
        message: `–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ${i}. –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å!`,
        priority: priorities[Math.floor(Math.random() * priorities.length)] as any,
        status: statuses[Math.floor(Math.random() * statuses.length)] as any,
      },
    });
  }
  console.log('‚úÖ –¢–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  for (let i = 1; i <= 50; i++) {
    const user = users[Math.floor(Math.random() * users.length)];
    const types = ['INFO', 'SUCCESS', 'WARNING', 'ERROR', 'PAYMENT', 'DEAL', 'SYSTEM'];
    
    await prisma.notification.create({
      data: {
        userId: user.id,
        title: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${i}`,
        message: `–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${i}`,
        type: types[Math.floor(Math.random() * types.length)] as any,
        isRead: Math.random() > 0.5,
        metadata: {
          source: 'test',
          timestamp: new Date().toISOString(),
        },
      },
    });
  }
  console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å—ã
  const courses = [];
  for (let i = 1; i <= 5; i++) {
    const course = await prisma.course.create({
      data: {
        title: `–ö—É—Ä—Å ${i}: –û—Å–Ω–æ–≤—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞`,
        description: `–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ ${i}. –ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è.`,
        content: `–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—É—Ä—Å–∞ ${i}...`,
        status: 'PUBLISHED',
        order: i,
      },
    });
    courses.push(course);
  }
  console.log('‚úÖ –ö—É—Ä—Å—ã —Å–æ–∑–¥–∞–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏
  for (const course of courses) {
    for (let i = 1; i <= 5; i++) {
      await prisma.lesson.create({
        data: {
          courseId: course.id,
          title: `–£—Ä–æ–∫ ${i}: ${course.title}`,
          content: `–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ ${i}...`,
          videoUrl: `https://picsum.photos/800/600?random=${i}_video`,
          duration: Math.floor(Math.random() * 60) + 15, // 15-75 –º–∏–Ω—É—Ç
          status: 'PUBLISHED',
          order: i,
        },
      });
    }
  }
  console.log('‚úÖ –£—Ä–æ–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
  const completionPromises = [];
  for (let i = 1; i <= 30; i++) {
    const user = users[Math.floor(Math.random() * users.length)];
    const course = courses[Math.floor(Math.random() * courses.length)];
    const lessons = await prisma.lesson.findMany({
      where: { courseId: course.id },
    });
    
    for (const lesson of lessons) {
      completionPromises.push(
        prisma.courseCompletion.upsert({
          where: {
            userId_courseId_lessonId: {
              userId: user.id,
              courseId: course.id,
              lessonId: lesson.id,
            },
          },
          update: {
            completed: Math.random() > 0.3, // 70% –∑–∞–≤–µ—Ä—à–µ–Ω—ã
          },
          create: {
            userId: user.id,
            courseId: course.id,
            lessonId: lesson.id,
            completed: Math.random() > 0.3, // 70% –∑–∞–≤–µ—Ä—à–µ–Ω—ã
          },
        })
      );
    }
  }
  await Promise.all(completionPromises);
  console.log('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ —Å–æ–∑–¥–∞–Ω—ã');

  // –°–æ–∑–¥–∞–µ–º –≤—ã–ø–ª–∞—Ç—ã
  for (let i = 1; i <= 20; i++) {
    const user = users[Math.floor(Math.random() * users.length)];
    const methods = ['BANK_TRANSFER', 'CARD', 'CRYPTO'];
    const statuses = ['PENDING', 'COMPLETED', 'FAILED', 'CANCELLED'];
    
    await prisma.payout.create({
      data: {
        userId: user.id,
        amount: Math.floor(Math.random() * 2000) + 500,
        status: statuses[Math.floor(Math.random() * statuses.length)],
        method: methods[Math.floor(Math.random() * methods.length)],
        externalId: `PAYOUT${i.toString().padStart(8, '0')}`,
        description: `–í—ã–ø–ª–∞—Ç–∞ ${i}`,
        metadata: {
          source: 'test',
          timestamp: new Date().toISOString(),
        },
      },
    });
  }
  console.log('‚úÖ –í—ã–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã');

  console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length + 1} (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∞)`);
  console.log(`   - –¢–æ–≤–∞—Ä—ã: ${products.length}`);
  console.log(`   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: 50`);
  console.log(`   - –ü–ª–∞—Ç–µ–∂–∏: 30`);
  console.log(`   - –°–¥–µ–ª–∫–∏: 15`);
  console.log(`   - –ß–∞—Ç—ã: ${chats.length}`);
  console.log(`   - –°–æ–æ–±—â–µ–Ω–∏—è: 100`);
  console.log(`   - –¢–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: 20`);
  console.log(`   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: 50`);
  console.log(`   - –ö—É—Ä—Å—ã: ${courses.length}`);
  console.log(`   - –£—Ä–æ–∫–∏: ${courses.length * 5}`);
  console.log(`   - –í—ã–ø–ª–∞—Ç—ã: 20`);
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

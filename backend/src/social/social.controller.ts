import { Body, Controller, Delete, Get, Logger, Param, Post, Put, Request, UseGuards, ValidationPipe } from '@nestjs/common';
import { IsBoolean, IsOptional, IsString, IsUrl } from 'class-validator';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { SocialService } from './social.service';

export class GetUserDataDto {
  platform: string;
  username: string;
}

export class ValidateLinkDto {
  platform: string;
  username: string;
}

export class CreateSocialLinkDto {
  @IsString()
  platform: string;
  
  @IsString()
  username: string;
  
  @IsUrl()
  url: string;
  
  @IsOptional()
  @IsBoolean()
  verified?: boolean;
}

export class UpdateSocialLinkDto {
  @IsOptional()
  @IsString()
  username?: string;
  
  @IsOptional()
  @IsUrl()
  url?: string;
  
  @IsOptional()
  @IsBoolean()
  verified?: boolean;
}

@Controller('social')
export class SocialController {
  private readonly logger = new Logger(SocialController.name);

  constructor(private readonly socialService: SocialService) {}

  @Get('user-data/:platform/:username')
  @UseGuards(JwtAuthGuard)
  async getUserData(
    @Param('platform') platform: string,
    @Param('username') username: string
  ) {
    this.logger.log(`–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ${platform}`);
    
    try {
      const userData = await this.socialService.getUserData(platform, username);
      
      if (!userData) {
        return {
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          data: null
        };
      }

      return {
        success: true,
        message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
        data: userData
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.message);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        data: null
      };
    }
  }

  @Post('user-data')
  @UseGuards(JwtAuthGuard)
  async getUserDataByBody(@Body() dto: GetUserDataDto) {
    this.logger.log(`–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${dto.username} —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ${dto.platform}`);
    
    try {
      const userData = await this.socialService.getUserData(dto.platform, dto.username);
      
      if (!userData) {
        return {
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          data: null
        };
      }

      return {
        success: true,
        message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
        data: userData
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.message);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        data: null
      };
    }
  }

  @Post('validate')
  @UseGuards(JwtAuthGuard)
  async validateLink(@Body() dto: ValidateLinkDto) {
    this.logger.log(`–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ ${dto.platform}/${dto.username}`);
    
    try {
      const isValid = await this.socialService.validateSocialLink(dto.platform, dto.username);
      
      return {
        success: true,
        message: isValid ? '–°—Å—ã–ª–∫–∞ –≤–∞–ª–∏–¥–Ω–∞' : '–°—Å—ã–ª–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞',
        data: {
          valid: isValid,
          platform: dto.platform,
          username: dto.username
        }
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏:`, error.message);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏',
        data: {
          valid: false,
          platform: dto.platform,
          username: dto.username
        }
      };
    }
  }

  @Get('platforms')
  @UseGuards(JwtAuthGuard)
  async getSupportedPlatforms() {
    return {
      success: true,
      message: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–ª—É—á–µ–Ω—ã',
      data: {
        platforms: [
          {
            id: 'telegram',
            name: 'Telegram',
            icon: 'üì±',
            description: '–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è',
            example: '@username'
          },
          {
            id: 'instagram',
            name: 'Instagram',
            icon: 'üì∑',
            description: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –¥–ª—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ',
            example: '@username'
          },
          {
            id: 'youtube',
            name: 'YouTube',
            icon: 'üì∫',
            description: '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
            example: '@username'
          },
          {
            id: 'tiktok',
            name: 'TikTok',
            icon: 'üéµ',
            description: '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ',
            example: '@username'
          }
        ]
      }
    };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –≤ –ë–î
  @Post('links')
  @UseGuards(JwtAuthGuard)
  async createSocialLink(@Request() req, @Body(ValidationPipe) dto: CreateSocialLinkDto) {
    this.logger.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}`);
    
    try {
      const socialLink = await this.socialService.createSocialLink(req.user.id, dto);
      
      return {
        success: true,
        message: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        data: socialLink
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:`, error.message);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏',
        data: null
      };
    }
  }

  @Get('links')
  @UseGuards(JwtAuthGuard)
  async getUserSocialLinks(@Request() req) {
    this.logger.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}`);
    
    try {
      const socialLinks = await this.socialService.getUserSocialLinks(req.user.id);
      
      return {
        success: true,
        message: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
        data: socialLinks
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:`, error.message);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫',
        data: []
      };
    }
  }

  @Get('links/:id')
  @UseGuards(JwtAuthGuard)
  async getSocialLinkById(@Request() req, @Param('id') id: string) {
    this.logger.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ ${id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}`);
    
    try {
      const socialLink = await this.socialService.getSocialLinkById(id, req.user.id);
      
      if (!socialLink) {
        return {
          success: false,
          message: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          data: null
        };
      }

      return {
        success: true,
        message: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        data: socialLink
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:`, error.message);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏',
        data: null
      };
    }
  }

  @Put('links/:id')
  @UseGuards(JwtAuthGuard)
  async updateSocialLink(@Request() req, @Param('id') id: string, @Body(ValidationPipe) dto: UpdateSocialLinkDto) {
    this.logger.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ ${id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}`);
    
    try {
      const result = await this.socialService.updateSocialLink(id, req.user.id, dto);
      
      if (result.count === 0) {
        return {
          success: false,
          message: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
          data: null
        };
      }

      return {
        success: true,
        message: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        data: { id, ...dto }
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:`, error.message);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏',
        data: null
      };
    }
  }

  @Delete('links/:id')
  @UseGuards(JwtAuthGuard)
  async deleteSocialLink(@Request() req, @Param('id') id: string) {
    this.logger.log(`–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ ${id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}`);
    
    try {
      const result = await this.socialService.deleteSocialLink(id, req.user.id);
      
      if (result.count === 0) {
        return {
          success: false,
          message: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ',
          data: null
        };
      }

      return {
        success: true,
        message: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        data: { id }
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:`, error.message);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏',
        data: null
      };
    }
  }
}

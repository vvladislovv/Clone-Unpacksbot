import { PrismaService } from '../prisma/prisma.service';

async function updateProductImages() {
  const prisma = new PrismaService();
  
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const products = await prisma.product.findMany({
      select: { id: true, images: true }
    });
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    
    let updated = 0;
    
    for (const product of products) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è via.placeholder.com
      const hasOldImages = product.images.some(img => 
        img.includes('via.placeholder.com') || img.includes('example.com')
      );
      
      if (hasOldImages) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const newImages = [];
        for (let i = 0; i < 3; i++) {
          const randomId = Math.floor(Math.random() * 1000) + 1;
          newImages.push(`https://picsum.photos/400/400?random=${randomId}`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        await prisma.product.update({
          where: { id: product.id },
          data: { images: newImages }
        });
        
        updated++;
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä ${product.id}`);
      }
    }
    
    console.log(`üéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updated}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
updateProductImages();


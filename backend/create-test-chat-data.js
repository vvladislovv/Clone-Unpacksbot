const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTestChatData() {
  try {
    console.log('üí¨ Creating test chat data...');

    // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findFirst();
    if (!user) {
      console.log('‚ùå No users found. Please create a user first.');
      return;
    }

    console.log(`‚úÖ Found user: ${user.username} (${user.id})`);

    // –°–æ–∑–¥–∞–¥–∏–º —á–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º
    const adminChat = await prisma.chat.create({
      data: {
        name: '–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
        isGroup: false,
        participants: {
          create: [
            {
              userId: user.id,
              isAdmin: false,
            }
          ],
        },
      },
      include: {
        participants: {
          include: {
            user: {
              select: {
                id: true,
                username: true,
                firstName: true,
                lastName: true,
                avatar: true,
              },
            },
          },
        },
      },
    });

    console.log(`‚úÖ Created admin chat: ${adminChat.id}`);

    // –°–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    const messages = [
      {
        chatId: adminChat.id,
        senderId: user.id,
        content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π –∑–∞–∫–∞–∑–∞.',
        type: 'TEXT'
      },
      {
        chatId: adminChat.id,
        senderId: user.id,
        content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–µ—à–∏—Ç—å —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ?',
        type: 'TEXT'
      },
      {
        chatId: adminChat.id,
        senderId: user.id,
        content: '–ö–∞—Ä—Ç–∞ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è, —Ö–æ—Ç—è –¥–µ–Ω—å–≥–∏ –µ—Å—Ç—å. –û—à–∏–±–∫–∞ "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤".',
        type: 'TEXT'
      },
      {
        chatId: adminChat.id,
        senderId: user.id,
        content: '–ü–æ–Ω—è—Ç–Ω–æ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –ª–∏–º–∏—Ç–∞–º–∏ –±–∞–Ω–∫–∞ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞—à–∏–º –±–∞–Ω–∫–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É.',
        type: 'TEXT'
      },
      {
        chatId: adminChat.id,
        senderId: user.id,
        content: '–°–ø–∞—Å–∏–±–æ! –ü–æ–ø—Ä–æ–±—É—é –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É.',
        type: 'TEXT'
      }
    ];

    // –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await prisma.message.deleteMany({
      where: { chatId: adminChat.id }
    });

    // –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for (const messageData of messages) {
      await prisma.message.create({
        data: messageData
      });
    }

    console.log(`‚úÖ Created ${messages.length} messages in admin chat`);

    // –°–æ–∑–¥–∞–¥–∏–º –µ—â–µ –æ–¥–∏–Ω —á–∞—Ç - –≥—Ä—É–ø–ø–æ–≤–æ–π
    const groupChat = await prisma.chat.create({
      data: {
        name: '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
        isGroup: true,
        participants: {
          create: [
            {
              userId: user.id,
              isAdmin: false,
            }
          ],
        },
      },
    });

    console.log(`‚úÖ Created group chat: ${groupChat.id}`);

    // –ü–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const chatStats = await prisma.chat.count({
      where: { 
        participants: {
          some: { userId: user.id }
        }
      }
    });

    const messageStats = await prisma.message.count({
      where: { 
        chat: {
          participants: {
            some: { userId: user.id }
          }
        }
      }
    });

    console.log('\nüìä Chat Statistics:');
    console.log(`Total chats: ${chatStats}`);
    console.log(`Total messages: ${messageStats}`);

  } catch (error) {
    console.error('‚ùå Error creating test chat data:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestChatData();

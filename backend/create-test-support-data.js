const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTestSupportData() {
  try {
    console.log('üÜò Creating test support data...');

    // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findFirst();
    if (!user) {
      console.log('‚ùå No users found. Please create a user first.');
      return;
    }

    console.log(`‚úÖ Found user: ${user.username} (${user.id})`);

    // –°–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const supportTickets = [
      {
        userId: user.id,
        subject: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π',
        message: '–ù–µ –º–æ–≥—É –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑, –∫–∞—Ä—Ç–∞ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?',
        status: 'OPEN',
        priority: 'HIGH'
      },
      {
        userId: user.id,
        subject: '–í–æ–ø—Ä–æ—Å –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ',
        message: '–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –º–æ–π –∑–∞–∫–∞–∑? –ó–∞–∫–∞–∑ #12345',
        status: 'IN_PROGRESS',
        priority: 'MEDIUM'
      },
      {
        userId: user.id,
        subject: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é',
        message: '–ú–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram?',
        status: 'RESOLVED',
        priority: 'LOW'
      },
      {
        userId: user.id,
        subject: '–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞',
        message: '–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ 3 –¥–Ω—è',
        status: 'OPEN',
        priority: 'HIGH'
      },
      {
        userId: user.id,
        subject: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
        message: '–°–∞–π—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ',
        status: 'IN_PROGRESS',
        priority: 'MEDIUM'
      }
    ];

    // –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–µ —Ç–∏–∫–µ—Ç—ã
    await prisma.supportTicket.deleteMany({
      where: { userId: user.id }
    });

    // –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–µ —Ç–∏–∫–µ—Ç—ã
    for (const ticketData of supportTickets) {
      await prisma.supportTicket.create({
        data: ticketData
      });
    }

    console.log(`‚úÖ Created ${supportTickets.length} support tickets`);

    // –ü–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await prisma.supportTicket.aggregate({
      where: { userId: user.id },
      _count: true
    });

    const openTickets = await prisma.supportTicket.count({
      where: { 
        userId: user.id,
        status: 'OPEN'
      }
    });

    const inProgressTickets = await prisma.supportTicket.count({
      where: { 
        userId: user.id,
        status: 'IN_PROGRESS'
      }
    });

    const resolvedTickets = await prisma.supportTicket.count({
      where: { 
        userId: user.id,
        status: 'RESOLVED'
      }
    });

    console.log('\nüìä Support Statistics:');
    console.log(`Total tickets: ${stats._count}`);
    console.log(`Open: ${openTickets}`);
    console.log(`In Progress: ${inProgressTickets}`);
    console.log(`Resolved: ${resolvedTickets}`);

  } catch (error) {
    console.error('‚ùå Error creating test support data:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestSupportData();

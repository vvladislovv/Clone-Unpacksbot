const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkDatabaseData() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏
    const users = await prisma.user.findMany({
      where: {
        OR: [
          { products: { some: {} } },
          { dealsAsBuyer: { some: {} } },
          { dealsAsSeller: { some: {} } },
          { transactions: { some: {} } },
          { referrals: { some: {} } }
        ]
      },
      select: {
        id: true,
        username: true,
        email: true,
        firstName: true,
        lastName: true,
        role: true
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: ${users.length}\n`);
    
    for (const user of users) {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username || user.email} (${user.role})`);
      console.log(`   ID: ${user.id}`);
      console.log(`   –ò–º—è: ${user.firstName} ${user.lastName}`);
      
      // –ü—Ä–æ–¥—É–∫—Ç—ã
      const products = await prisma.product.findMany({
        where: { sellerId: user.id },
        select: { id: true, title: true, price: true, isActive: true }
      });
      
      // –°–¥–µ–ª–∫–∏
      const deals = await prisma.deal.findMany({
        where: {
          OR: [
            { buyerId: user.id },
            { sellerId: user.id }
          ]
        },
        select: { id: true, status: true, amount: true }
      });
      
      // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const transactions = await prisma.transaction.findMany({
        where: { userId: user.id },
        select: { id: true, type: true, amount: true, status: true }
      });
      
      // –†–µ—Ñ–µ—Ä–∞–ª—ã
      const referrals = await prisma.user.findMany({
        where: { referredById: user.id },
        select: { id: true, username: true, email: true }
      });
      
      console.log(`\n   üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã (${products.length}):`);
      products.forEach((product, index) => {
        console.log(`      ${index + 1}. ${product.title} - ‚ÇΩ${product.price} (${product.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'})`);
      });
      
      console.log(`\n   ü§ù –°–¥–µ–ª–∫–∏ (${deals.length}):`);
      deals.forEach((deal, index) => {
        console.log(`      ${index + 1}. ID: ${deal.id} - ‚ÇΩ${deal.amount} - ${deal.status}`);
      });
      
      console.log(`\n   üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (${transactions.length}):`);
      transactions.forEach((transaction, index) => {
        console.log(`      ${index + 1}. ${transaction.type} - ‚ÇΩ${transaction.amount} - ${transaction.status}`);
      });
      
      console.log(`\n   üë• –†–µ—Ñ–µ—Ä–∞–ª—ã (${referrals.length}):`);
      referrals.forEach((referral, index) => {
        console.log(`      ${index + 1}. ${referral.username || referral.email}`);
      });
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è API
      const totalProducts = products.length;
      const activeProducts = products.filter(p => p.isActive).length;
      const totalDeals = deals.length;
      const completedDeals = deals.filter(d => d.status === 'COMPLETED').length;
      const totalTransactions = transactions.length;
      const completedTransactions = transactions.filter(t => t.status === 'COMPLETED').length;
      const pendingTransactions = transactions.filter(t => t.status === 'PENDING').length;
      const totalReferrals = referrals.length;
      
      // –î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
      const revenueTransactions = transactions.filter(t => 
        ['DEPOSIT', 'COMMISSION', 'REFERRAL', 'CAMPAIGN_PAYMENT'].includes(t.type) && t.status === 'COMPLETED'
      );
      const expenseTransactions = transactions.filter(t => 
        ['WITHDRAWAL', 'PAYMENT'].includes(t.type) && t.status === 'COMPLETED'
      );
      
      const totalRevenue = revenueTransactions.reduce((sum, t) => sum + Number(t.amount), 0);
      const totalSpent = expenseTransactions.reduce((sum, t) => sum + Number(t.amount), 0);
      const referralEarnings = transactions
        .filter(t => t.type === 'REFERRAL' && t.status === 'COMPLETED')
        .reduce((sum, t) => sum + Number(t.amount), 0);
      
      console.log(`\n   üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–õ–Ø API:`);
      console.log(`      - totalProducts: ${totalProducts}`);
      console.log(`      - activeProducts: ${activeProducts}`);
      console.log(`      - totalDeals: ${totalDeals}`);
      console.log(`      - completedDeals: ${completedDeals}`);
      console.log(`      - totalTransactions: ${totalTransactions}`);
      console.log(`      - completedTransactions: ${completedTransactions}`);
      console.log(`      - pendingTransactions: ${pendingTransactions}`);
      console.log(`      - totalReferrals: ${totalReferrals}`);
      console.log(`      - totalRevenue: ‚ÇΩ${totalRevenue}`);
      console.log(`      - totalSpent: ‚ÇΩ${totalSpent}`);
      console.log(`      - referralEarnings: ‚ÇΩ${referralEarnings}`);
      
      console.log('\n' + '='.repeat(80) + '\n');
    }
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–∑–µ
    console.log('üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–ê–ó–ï:');
    
    const totalUsers = await prisma.user.count();
    const totalProducts = await prisma.product.count();
    const totalDeals = await prisma.deal.count();
    const totalTransactions = await prisma.transaction.count();
    
    console.log(`- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    console.log(`- –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${totalProducts}`);
    console.log(`- –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${totalDeals}`);
    console.log(`- –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalTransactions}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkDatabaseData();

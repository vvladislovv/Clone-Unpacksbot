const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTestNotifications() {
  try {
    console.log('üîî Creating test notifications...');

    // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findFirst();
    if (!user) {
      console.log('‚ùå No users found. Please create a user first.');
      return;
    }

    console.log(`‚úÖ Found user: ${user.username} (${user.id})`);

    // –°–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notifications = [
      {
        userId: user.id,
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Unpacker Clone! –ù–∞—á–Ω–∏—Ç–µ —Å –∏–∑—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤.',
        type: 'INFO',
        isRead: false,
        metadata: { category: 'welcome' }
      },
      {
        userId: user.id,
        title: '–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω',
        message: '–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 1000 —Ä—É–±–ª–µ–π. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!',
        type: 'SUCCESS',
        isRead: false,
        metadata: { amount: 1000, currency: 'RUB' }
      },
      {
        userId: user.id,
        title: '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        message: '–í–∞—à –∑–∞–∫–∞–∑ #12345 —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.',
        type: 'SUCCESS',
        isRead: true,
        metadata: { orderId: '12345' }
      },
      {
        userId: user.id,
        title: '–°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
        message: '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ 15.01.2024 —Å 02:00 –¥–æ 04:00 –ú–°–ö.',
        type: 'WARNING',
        isRead: false,
        metadata: { maintenanceDate: '2024-01-15T02:00:00Z' }
      },
      {
        userId: user.id,
        title: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ',
        message: '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ —Ç–æ–≤–∞—Ä—É "–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Nike Air Max".',
        type: 'INFO',
        isRead: false,
        metadata: { chatId: 'chat_123', productId: 'prod_456' }
      },
      {
        userId: user.id,
        title: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è',
        message: '–í—ã –ø–æ–ª—É—á–∏–ª–∏ 50 —Ä—É–±–ª–µ–π –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ.',
        type: 'SUCCESS',
        isRead: false,
        metadata: { amount: 50, referralCode: user.referralCode }
      },
      {
        userId: user.id,
        title: '–ö–∞–º–ø–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        message: '–í–∞—à–∞ —Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è "–õ–µ—Ç–Ω—è—è –∫–æ–ª–ª–µ–∫—Ü–∏—è" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.',
        type: 'INFO',
        isRead: true,
        metadata: { campaignId: 'camp_789' }
      },
      {
        userId: user.id,
        title: '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –ø–ª–∞—Ç–µ–∂. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
        type: 'ERROR',
        isRead: false,
        metadata: { paymentId: 'pay_999', errorCode: 'CARD_DECLINED' }
      }
    ];

    // –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.notification.deleteMany({
      where: { userId: user.id }
    });

    // –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for (const notification of notifications) {
      await prisma.notification.create({
        data: notification
      });
    }

    console.log(`‚úÖ Created ${notifications.length} test notifications for user ${user.username}`);

    // –ü–æ–∫–∞–∂–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const createdNotifications = await prisma.notification.findMany({
      where: { userId: user.id },
      orderBy: { createdAt: 'desc' }
    });

    console.log('\nüìã Created notifications:');
    createdNotifications.forEach((notif, index) => {
      console.log(`${index + 1}. [${notif.type}] ${notif.title} - ${notif.isRead ? '‚úÖ Read' : '‚ùå Unread'}`);
    });

  } catch (error) {
    console.error('‚ùå Error creating test notifications:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestNotifications();




